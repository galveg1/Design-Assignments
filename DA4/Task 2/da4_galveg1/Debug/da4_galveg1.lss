
da4_galveg1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000004d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007db  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  00000d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c2  00000000  00000000  0000144a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fd  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  00001cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001dcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  88:	0c 94 2d 02 	jmp	0x45a	; 0x45a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
volatile uint8_t speed; //variable to hold ADC value
//uint8_t speed_Low	= 0;
//uint16_t ten_bit	= 0;

ISR(ADC_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	ADCSRA		|= (1 << ADIF); //set ADIF 1
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	80 83       	st	Z, r24
	speed		= ADCH;
  aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	//OCR1AL		= ADCL;
	//OCR1AH		= ADCH;
	
	

}//end ADC_vect
  b2:	ff 91       	pop	r31
  b4:	ef 91       	pop	r30
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_13>:

ISR(TIMER1_OVF_vect)
{	
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1

}//end OVF_vect
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f e9       	ldi	r24, 0x9F	; 159
  e6:	9f e0       	ldi	r25, 0x0F	; 15
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <__vector_11+0x12>
  ec:	00 c0       	rjmp	.+0      	; 0xee <__vector_11+0x18>
  ee:	00 00       	nop
	_delay_ms(2);
}//end COMP1_vect
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <ADC_Init>:
}//end main


void ADC_Init()
{
	DDRC	= 0;			//Set PORTC as input for adc
  fe:	17 b8       	out	0x07, r1	; 7
	DIDR0	= 0x01;			//Disable Digi input on ADC0
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	ADMUX = 0;				//
 106:	ec e7       	ldi	r30, 0x7C	; 124
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);	//Use Vcc Ref voltage
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);	//Left adjust ADC Reg, 8-bit Resolution
 112:	80 81       	ld	r24, Z
 114:	80 62       	ori	r24, 0x20	; 32
 116:	80 83       	st	Z, r24
	
	//Enable ADC, Start Conv, Set Auto Trig Enable
	ADCSRA |= (1 << ADEN);	//Enable ADC
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //Set ADC Auto Trig
 122:	80 81       	ld	r24, Z
 124:	80 62       	ori	r24, 0x20	; 32
 126:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//Enable Interrupts
 128:	80 81       	ld	r24, Z
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0); //8MHz, Pre-Scale 64 = 125KHz
 12e:	80 81       	ld	r24, Z
 130:	86 60       	ori	r24, 0x06	; 6
 132:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	//Start Conversion
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	80 83       	st	Z, r24
	
	ADCSRB = 0;			//Free running mode
 13a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	sei();				//Enable interrupts
 13e:	78 94       	sei
 140:	08 95       	ret

00000142 <my_delay>:
	
}//end ADC_Init

void my_delay()
{
	while(TCNT1 != OCR1A);
 142:	a4 e8       	ldi	r26, 0x84	; 132
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	e8 e8       	ldi	r30, 0x88	; 136
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	2d 91       	ld	r18, X+
 14c:	3c 91       	ld	r19, X
 14e:	11 97       	sbiw	r26, 0x01	; 1
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	28 17       	cp	r18, r24
 156:	39 07       	cpc	r19, r25
 158:	c1 f7       	brne	.-16     	; 0x14a <my_delay+0x8>
	TCNT1 = 0;
 15a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 15e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 162:	08 95       	ret

00000164 <main>:

void my_delay();

int main(void)
{
	DDRD	= 0b00001111; //set PIND0-PIND3 to output
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	8a b9       	out	0x0a, r24	; 10
	TIFR1	|= (1 << OCF1A);	//Enable Out Comp A match INT 
 168:	b1 9a       	sbi	0x16, 1	; 22
	TIMSK1	|= (1 << OCIE1A);		//enable CompA INT
 16a:	ef e6       	ldi	r30, 0x6F	; 111
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	82 60       	ori	r24, 0x02	; 2
 172:	80 83       	st	Z, r24
	TCCR1A	 = 0;
 174:	a0 e8       	ldi	r26, 0x80	; 128
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	1c 92       	st	X, r1
	TCCR1B	 = 0;
 17a:	e1 e8       	ldi	r30, 0x81	; 129
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	10 82       	st	Z, r1
	

	//set to CTC mode
	TCCR1A	 = 0; //set WGM11 = 0, WGM10 = 0
 180:	1c 92       	st	X, r1
	TCCR1B	|= (1 << WGM12) | (1 << CS12); //set WGM13 = 0, WGM12 = 1 CTC, Pre-scale = 256
 182:	80 81       	ld	r24, Z
 184:	8c 60       	ori	r24, 0x0C	; 12
 186:	80 83       	st	Z, r24
	//set Output Compare Register to calculated count(compared
	OCR1A = 156;
 188:	8c e9       	ldi	r24, 0x9C	; 156
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	
	DDRD = 0xFF; //set D port to output
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	8a b9       	out	0x0a, r24	; 10
	
	ADC_Init();		//initialize ADC
 198:	0e 94 7f 00 	call	0xfe	; 0xfe <ADC_Init>
	
	sei();			//Enable Interrupts
 19c:	78 94       	sei
	
	while (1)
	{
		ADCSRA |= (1 << ADSC);	//Start Conversion
 19e:	ca e7       	ldi	r28, 0x7A	; 122
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
		while((ADCSRA & (1 << ADIF)) == 0);
		OCR1A		= speed * .75;
 1a2:	08 e8       	ldi	r16, 0x88	; 136
 1a4:	10 e0       	ldi	r17, 0x00	; 0
		
		PORTD = 1; //black
 1a6:	cc 24       	eor	r12, r12
 1a8:	c3 94       	inc	r12
		my_delay();
		PORTD = 2; //green
 1aa:	68 94       	set
 1ac:	dd 24       	eor	r13, r13
 1ae:	d1 f8       	bld	r13, 1
		my_delay();
		PORTD = 4; //red
 1b0:	68 94       	set
 1b2:	ee 24       	eor	r14, r14
 1b4:	e2 f8       	bld	r14, 2
		my_delay();
		PORTD = 8; //blue
 1b6:	68 94       	set
 1b8:	ff 24       	eor	r15, r15
 1ba:	f3 f8       	bld	r15, 3
	
	sei();			//Enable Interrupts
	
	while (1)
	{
		ADCSRA |= (1 << ADSC);	//Start Conversion
 1bc:	88 81       	ld	r24, Y
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	88 83       	st	Y, r24
		while((ADCSRA & (1 << ADIF)) == 0);
 1c2:	88 81       	ld	r24, Y
 1c4:	84 ff       	sbrs	r24, 4
 1c6:	fd cf       	rjmp	.-6      	; 0x1c2 <main+0x5e>
		OCR1A		= speed * .75;
 1c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 34 01 	call	0x268	; 0x268 <__floatsisf>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e4       	ldi	r20, 0x40	; 64
 1dc:	5f e3       	ldi	r21, 0x3F	; 63
 1de:	0e 94 98 01 	call	0x330	; 0x330 <__mulsf3>
 1e2:	0e 94 03 01 	call	0x206	; 0x206 <__fixunssfsi>
 1e6:	f8 01       	movw	r30, r16
 1e8:	71 83       	std	Z+1, r23	; 0x01
 1ea:	60 83       	st	Z, r22
		
		PORTD = 1; //black
 1ec:	cb b8       	out	0x0b, r12	; 11
		my_delay();
 1ee:	0e 94 a1 00 	call	0x142	; 0x142 <my_delay>
		PORTD = 2; //green
 1f2:	db b8       	out	0x0b, r13	; 11
		my_delay();
 1f4:	0e 94 a1 00 	call	0x142	; 0x142 <my_delay>
		PORTD = 4; //red
 1f8:	eb b8       	out	0x0b, r14	; 11
		my_delay();
 1fa:	0e 94 a1 00 	call	0x142	; 0x142 <my_delay>
		PORTD = 8; //blue
 1fe:	fb b8       	out	0x0b, r15	; 11
		my_delay();
 200:	0e 94 a1 00 	call	0x142	; 0x142 <my_delay>
		_delay_ms(2);
		*/
		
		
		
	}//end while
 204:	db cf       	rjmp	.-74     	; 0x1bc <main+0x58>

00000206 <__fixunssfsi>:
 206:	0e 94 77 01 	call	0x2ee	; 0x2ee <__fp_splitA>
 20a:	88 f0       	brcs	.+34     	; 0x22e <__fixunssfsi+0x28>
 20c:	9f 57       	subi	r25, 0x7F	; 127
 20e:	98 f0       	brcs	.+38     	; 0x236 <__fixunssfsi+0x30>
 210:	b9 2f       	mov	r27, r25
 212:	99 27       	eor	r25, r25
 214:	b7 51       	subi	r27, 0x17	; 23
 216:	b0 f0       	brcs	.+44     	; 0x244 <__fixunssfsi+0x3e>
 218:	e1 f0       	breq	.+56     	; 0x252 <__fixunssfsi+0x4c>
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	88 1f       	adc	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	1a f0       	brmi	.+6      	; 0x22a <__fixunssfsi+0x24>
 224:	ba 95       	dec	r27
 226:	c9 f7       	brne	.-14     	; 0x21a <__fixunssfsi+0x14>
 228:	14 c0       	rjmp	.+40     	; 0x252 <__fixunssfsi+0x4c>
 22a:	b1 30       	cpi	r27, 0x01	; 1
 22c:	91 f0       	breq	.+36     	; 0x252 <__fixunssfsi+0x4c>
 22e:	0e 94 91 01 	call	0x322	; 0x322 <__fp_zero>
 232:	b1 e0       	ldi	r27, 0x01	; 1
 234:	08 95       	ret
 236:	0c 94 91 01 	jmp	0x322	; 0x322 <__fp_zero>
 23a:	67 2f       	mov	r22, r23
 23c:	78 2f       	mov	r23, r24
 23e:	88 27       	eor	r24, r24
 240:	b8 5f       	subi	r27, 0xF8	; 248
 242:	39 f0       	breq	.+14     	; 0x252 <__fixunssfsi+0x4c>
 244:	b9 3f       	cpi	r27, 0xF9	; 249
 246:	cc f3       	brlt	.-14     	; 0x23a <__fixunssfsi+0x34>
 248:	86 95       	lsr	r24
 24a:	77 95       	ror	r23
 24c:	67 95       	ror	r22
 24e:	b3 95       	inc	r27
 250:	d9 f7       	brne	.-10     	; 0x248 <__fixunssfsi+0x42>
 252:	3e f4       	brtc	.+14     	; 0x262 <__fixunssfsi+0x5c>
 254:	90 95       	com	r25
 256:	80 95       	com	r24
 258:	70 95       	com	r23
 25a:	61 95       	neg	r22
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	8f 4f       	sbci	r24, 0xFF	; 255
 260:	9f 4f       	sbci	r25, 0xFF	; 255
 262:	08 95       	ret

00000264 <__floatunsisf>:
 264:	e8 94       	clt
 266:	09 c0       	rjmp	.+18     	; 0x27a <__floatsisf+0x12>

00000268 <__floatsisf>:
 268:	97 fb       	bst	r25, 7
 26a:	3e f4       	brtc	.+14     	; 0x27a <__floatsisf+0x12>
 26c:	90 95       	com	r25
 26e:	80 95       	com	r24
 270:	70 95       	com	r23
 272:	61 95       	neg	r22
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	8f 4f       	sbci	r24, 0xFF	; 255
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	99 23       	and	r25, r25
 27c:	a9 f0       	breq	.+42     	; 0x2a8 <__floatsisf+0x40>
 27e:	f9 2f       	mov	r31, r25
 280:	96 e9       	ldi	r25, 0x96	; 150
 282:	bb 27       	eor	r27, r27
 284:	93 95       	inc	r25
 286:	f6 95       	lsr	r31
 288:	87 95       	ror	r24
 28a:	77 95       	ror	r23
 28c:	67 95       	ror	r22
 28e:	b7 95       	ror	r27
 290:	f1 11       	cpse	r31, r1
 292:	f8 cf       	rjmp	.-16     	; 0x284 <__floatsisf+0x1c>
 294:	fa f4       	brpl	.+62     	; 0x2d4 <__floatsisf+0x6c>
 296:	bb 0f       	add	r27, r27
 298:	11 f4       	brne	.+4      	; 0x29e <__floatsisf+0x36>
 29a:	60 ff       	sbrs	r22, 0
 29c:	1b c0       	rjmp	.+54     	; 0x2d4 <__floatsisf+0x6c>
 29e:	6f 5f       	subi	r22, 0xFF	; 255
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
 2a2:	8f 4f       	sbci	r24, 0xFF	; 255
 2a4:	9f 4f       	sbci	r25, 0xFF	; 255
 2a6:	16 c0       	rjmp	.+44     	; 0x2d4 <__floatsisf+0x6c>
 2a8:	88 23       	and	r24, r24
 2aa:	11 f0       	breq	.+4      	; 0x2b0 <__floatsisf+0x48>
 2ac:	96 e9       	ldi	r25, 0x96	; 150
 2ae:	11 c0       	rjmp	.+34     	; 0x2d2 <__floatsisf+0x6a>
 2b0:	77 23       	and	r23, r23
 2b2:	21 f0       	breq	.+8      	; 0x2bc <__floatsisf+0x54>
 2b4:	9e e8       	ldi	r25, 0x8E	; 142
 2b6:	87 2f       	mov	r24, r23
 2b8:	76 2f       	mov	r23, r22
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <__floatsisf+0x5e>
 2bc:	66 23       	and	r22, r22
 2be:	71 f0       	breq	.+28     	; 0x2dc <__floatsisf+0x74>
 2c0:	96 e8       	ldi	r25, 0x86	; 134
 2c2:	86 2f       	mov	r24, r22
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	2a f0       	brmi	.+10     	; 0x2d4 <__floatsisf+0x6c>
 2ca:	9a 95       	dec	r25
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	88 1f       	adc	r24, r24
 2d2:	da f7       	brpl	.-10     	; 0x2ca <__floatsisf+0x62>
 2d4:	88 0f       	add	r24, r24
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	97 f9       	bld	r25, 7
 2dc:	08 95       	ret

000002de <__fp_split3>:
 2de:	57 fd       	sbrc	r21, 7
 2e0:	90 58       	subi	r25, 0x80	; 128
 2e2:	44 0f       	add	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	59 f0       	breq	.+22     	; 0x2fe <__fp_splitA+0x10>
 2e8:	5f 3f       	cpi	r21, 0xFF	; 255
 2ea:	71 f0       	breq	.+28     	; 0x308 <__fp_splitA+0x1a>
 2ec:	47 95       	ror	r20

000002ee <__fp_splitA>:
 2ee:	88 0f       	add	r24, r24
 2f0:	97 fb       	bst	r25, 7
 2f2:	99 1f       	adc	r25, r25
 2f4:	61 f0       	breq	.+24     	; 0x30e <__fp_splitA+0x20>
 2f6:	9f 3f       	cpi	r25, 0xFF	; 255
 2f8:	79 f0       	breq	.+30     	; 0x318 <__fp_splitA+0x2a>
 2fa:	87 95       	ror	r24
 2fc:	08 95       	ret
 2fe:	12 16       	cp	r1, r18
 300:	13 06       	cpc	r1, r19
 302:	14 06       	cpc	r1, r20
 304:	55 1f       	adc	r21, r21
 306:	f2 cf       	rjmp	.-28     	; 0x2ec <__fp_split3+0xe>
 308:	46 95       	lsr	r20
 30a:	f1 df       	rcall	.-30     	; 0x2ee <__fp_splitA>
 30c:	08 c0       	rjmp	.+16     	; 0x31e <__fp_splitA+0x30>
 30e:	16 16       	cp	r1, r22
 310:	17 06       	cpc	r1, r23
 312:	18 06       	cpc	r1, r24
 314:	99 1f       	adc	r25, r25
 316:	f1 cf       	rjmp	.-30     	; 0x2fa <__fp_splitA+0xc>
 318:	86 95       	lsr	r24
 31a:	71 05       	cpc	r23, r1
 31c:	61 05       	cpc	r22, r1
 31e:	08 94       	sec
 320:	08 95       	ret

00000322 <__fp_zero>:
 322:	e8 94       	clt

00000324 <__fp_szero>:
 324:	bb 27       	eor	r27, r27
 326:	66 27       	eor	r22, r22
 328:	77 27       	eor	r23, r23
 32a:	cb 01       	movw	r24, r22
 32c:	97 f9       	bld	r25, 7
 32e:	08 95       	ret

00000330 <__mulsf3>:
 330:	0e 94 ab 01 	call	0x356	; 0x356 <__mulsf3x>
 334:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_round>
 338:	0e 94 0e 02 	call	0x41c	; 0x41c <__fp_pscA>
 33c:	38 f0       	brcs	.+14     	; 0x34c <__mulsf3+0x1c>
 33e:	0e 94 15 02 	call	0x42a	; 0x42a <__fp_pscB>
 342:	20 f0       	brcs	.+8      	; 0x34c <__mulsf3+0x1c>
 344:	95 23       	and	r25, r21
 346:	11 f0       	breq	.+4      	; 0x34c <__mulsf3+0x1c>
 348:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_inf>
 34c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_nan>
 350:	11 24       	eor	r1, r1
 352:	0c 94 92 01 	jmp	0x324	; 0x324 <__fp_szero>

00000356 <__mulsf3x>:
 356:	0e 94 6f 01 	call	0x2de	; 0x2de <__fp_split3>
 35a:	70 f3       	brcs	.-36     	; 0x338 <__mulsf3+0x8>

0000035c <__mulsf3_pse>:
 35c:	95 9f       	mul	r25, r21
 35e:	c1 f3       	breq	.-16     	; 0x350 <__mulsf3+0x20>
 360:	95 0f       	add	r25, r21
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	55 1f       	adc	r21, r21
 366:	62 9f       	mul	r22, r18
 368:	f0 01       	movw	r30, r0
 36a:	72 9f       	mul	r23, r18
 36c:	bb 27       	eor	r27, r27
 36e:	f0 0d       	add	r31, r0
 370:	b1 1d       	adc	r27, r1
 372:	63 9f       	mul	r22, r19
 374:	aa 27       	eor	r26, r26
 376:	f0 0d       	add	r31, r0
 378:	b1 1d       	adc	r27, r1
 37a:	aa 1f       	adc	r26, r26
 37c:	64 9f       	mul	r22, r20
 37e:	66 27       	eor	r22, r22
 380:	b0 0d       	add	r27, r0
 382:	a1 1d       	adc	r26, r1
 384:	66 1f       	adc	r22, r22
 386:	82 9f       	mul	r24, r18
 388:	22 27       	eor	r18, r18
 38a:	b0 0d       	add	r27, r0
 38c:	a1 1d       	adc	r26, r1
 38e:	62 1f       	adc	r22, r18
 390:	73 9f       	mul	r23, r19
 392:	b0 0d       	add	r27, r0
 394:	a1 1d       	adc	r26, r1
 396:	62 1f       	adc	r22, r18
 398:	83 9f       	mul	r24, r19
 39a:	a0 0d       	add	r26, r0
 39c:	61 1d       	adc	r22, r1
 39e:	22 1f       	adc	r18, r18
 3a0:	74 9f       	mul	r23, r20
 3a2:	33 27       	eor	r19, r19
 3a4:	a0 0d       	add	r26, r0
 3a6:	61 1d       	adc	r22, r1
 3a8:	23 1f       	adc	r18, r19
 3aa:	84 9f       	mul	r24, r20
 3ac:	60 0d       	add	r22, r0
 3ae:	21 1d       	adc	r18, r1
 3b0:	82 2f       	mov	r24, r18
 3b2:	76 2f       	mov	r23, r22
 3b4:	6a 2f       	mov	r22, r26
 3b6:	11 24       	eor	r1, r1
 3b8:	9f 57       	subi	r25, 0x7F	; 127
 3ba:	50 40       	sbci	r21, 0x00	; 0
 3bc:	9a f0       	brmi	.+38     	; 0x3e4 <__mulsf3_pse+0x88>
 3be:	f1 f0       	breq	.+60     	; 0x3fc <__mulsf3_pse+0xa0>
 3c0:	88 23       	and	r24, r24
 3c2:	4a f0       	brmi	.+18     	; 0x3d6 <__mulsf3_pse+0x7a>
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	bb 1f       	adc	r27, r27
 3ca:	66 1f       	adc	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	88 1f       	adc	r24, r24
 3d0:	91 50       	subi	r25, 0x01	; 1
 3d2:	50 40       	sbci	r21, 0x00	; 0
 3d4:	a9 f7       	brne	.-22     	; 0x3c0 <__mulsf3_pse+0x64>
 3d6:	9e 3f       	cpi	r25, 0xFE	; 254
 3d8:	51 05       	cpc	r21, r1
 3da:	80 f0       	brcs	.+32     	; 0x3fc <__mulsf3_pse+0xa0>
 3dc:	0c 94 05 02 	jmp	0x40a	; 0x40a <__fp_inf>
 3e0:	0c 94 92 01 	jmp	0x324	; 0x324 <__fp_szero>
 3e4:	5f 3f       	cpi	r21, 0xFF	; 255
 3e6:	e4 f3       	brlt	.-8      	; 0x3e0 <__mulsf3_pse+0x84>
 3e8:	98 3e       	cpi	r25, 0xE8	; 232
 3ea:	d4 f3       	brlt	.-12     	; 0x3e0 <__mulsf3_pse+0x84>
 3ec:	86 95       	lsr	r24
 3ee:	77 95       	ror	r23
 3f0:	67 95       	ror	r22
 3f2:	b7 95       	ror	r27
 3f4:	f7 95       	ror	r31
 3f6:	e7 95       	ror	r30
 3f8:	9f 5f       	subi	r25, 0xFF	; 255
 3fa:	c1 f7       	brne	.-16     	; 0x3ec <__mulsf3_pse+0x90>
 3fc:	fe 2b       	or	r31, r30
 3fe:	88 0f       	add	r24, r24
 400:	91 1d       	adc	r25, r1
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	97 f9       	bld	r25, 7
 408:	08 95       	ret

0000040a <__fp_inf>:
 40a:	97 f9       	bld	r25, 7
 40c:	9f 67       	ori	r25, 0x7F	; 127
 40e:	80 e8       	ldi	r24, 0x80	; 128
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	08 95       	ret

00000416 <__fp_nan>:
 416:	9f ef       	ldi	r25, 0xFF	; 255
 418:	80 ec       	ldi	r24, 0xC0	; 192
 41a:	08 95       	ret

0000041c <__fp_pscA>:
 41c:	00 24       	eor	r0, r0
 41e:	0a 94       	dec	r0
 420:	16 16       	cp	r1, r22
 422:	17 06       	cpc	r1, r23
 424:	18 06       	cpc	r1, r24
 426:	09 06       	cpc	r0, r25
 428:	08 95       	ret

0000042a <__fp_pscB>:
 42a:	00 24       	eor	r0, r0
 42c:	0a 94       	dec	r0
 42e:	12 16       	cp	r1, r18
 430:	13 06       	cpc	r1, r19
 432:	14 06       	cpc	r1, r20
 434:	05 06       	cpc	r0, r21
 436:	08 95       	ret

00000438 <__fp_round>:
 438:	09 2e       	mov	r0, r25
 43a:	03 94       	inc	r0
 43c:	00 0c       	add	r0, r0
 43e:	11 f4       	brne	.+4      	; 0x444 <__fp_round+0xc>
 440:	88 23       	and	r24, r24
 442:	52 f0       	brmi	.+20     	; 0x458 <__fp_round+0x20>
 444:	bb 0f       	add	r27, r27
 446:	40 f4       	brcc	.+16     	; 0x458 <__fp_round+0x20>
 448:	bf 2b       	or	r27, r31
 44a:	11 f4       	brne	.+4      	; 0x450 <__fp_round+0x18>
 44c:	60 ff       	sbrs	r22, 0
 44e:	04 c0       	rjmp	.+8      	; 0x458 <__fp_round+0x20>
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	8f 4f       	sbci	r24, 0xFF	; 255
 456:	9f 4f       	sbci	r25, 0xFF	; 255
 458:	08 95       	ret

0000045a <_exit>:
 45a:	f8 94       	cli

0000045c <__stop_program>:
 45c:	ff cf       	rjmp	.-2      	; 0x45c <__stop_program>
