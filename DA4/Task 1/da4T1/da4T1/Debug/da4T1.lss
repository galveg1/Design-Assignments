
da4T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000478  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000004ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d8  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ec  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038a  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000017fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040b  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000177  00000000  00000000  00001d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 00 01 	call	0x200	; 0x200 <main>
  88:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
void timeKepper();
void interrupts();
void on_off();

ISR(ADC_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	ADCSRA	|= (1 << ADIF); //set ADIF 1
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	80 83       	st	Z, r24
}//end ADC_vect
  aa:	ff 91       	pop	r31
  ac:	ef 91       	pop	r30
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_16>:


ISR(TIMER0_OVF_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	//PORTB = 0x01;	//Toggle on Start of new period 
	
	ADCSRA |= (1 << ADSC);	//Start Conversion
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
	while((ADCSRA & (1 << ADIF)) == 0);
  e6:	80 81       	ld	r24, Z
  e8:	84 ff       	sbrs	r24, 4
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <__vector_16+0x2c>
	
	speed = ADCH;
  ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	//Control DC from 0 to 95 of total TIMER1 Ticks at 1024 Pre-Scale
	//OC1A Drives motor and Toggles on compare of of OCR1A	
	//Creating a PWM wave
	if(speed >= 242) //242 95% of ADCH
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f8:	82 3f       	cpi	r24, 0xF2	; 242
  fa:	38 f0       	brcs	.+14     	; 0x10a <__vector_16+0x50>
	{
		OCR1A = 7422;	//95% of 7813 total timer ticks for 1024 Pre-Scale Max
  fc:	8e ef       	ldi	r24, 0xFE	; 254
  fe:	9c e1       	ldi	r25, 0x1C	; 28
 100:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 104:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 108:	13 c0       	rjmp	.+38     	; 0x130 <__vector_16+0x76>
	}
	else
	{
		OCR1A = speed * 32.3;	//Conversion of 8-bit ADCH to Timer1 counter range
 10a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 41 01 	call	0x282	; 0x282 <__floatsisf>
 118:	23 e3       	ldi	r18, 0x33	; 51
 11a:	33 e3       	ldi	r19, 0x33	; 51
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	52 e4       	ldi	r21, 0x42	; 66
 120:	0e 94 a5 01 	call	0x34a	; 0x34a <__mulsf3>
 124:	0e 94 10 01 	call	0x220	; 0x220 <__fixunssfsi>
 128:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 12c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}	
}//end TIMER0_OVF_vect
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_1>:

//This was a failure unable to keep
//Motor only stays off while pressed
ISR(INT0_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
	EIFR |= (1 << INTF0);
 162:	e0 9a       	sbi	0x1c, 0	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	2f e3       	ldi	r18, 0x3F	; 63
 166:	8d e0       	ldi	r24, 0x0D	; 13
 168:	93 e0       	ldi	r25, 0x03	; 3
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <__vector_1+0x18>
 172:	00 c0       	rjmp	.+0      	; 0x174 <__vector_1+0x22>
 174:	00 00       	nop
	_delay_ms(1000);				//Debouncing
	while(!(PIND & (1 << PIND2)) == 0);	//Pull-up resistor switch to ground
 176:	4a 99       	sbic	0x09, 2	; 9
 178:	fe cf       	rjmp	.-4      	; 0x176 <__vector_1+0x24>

}//end ISR(INT0_vect)
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <ADC_Init>:
	
}//end MAIN

void ADC_Init()
{
	DDRC	= 0;			//Set PORTC as input for adc
 18a:	17 b8       	out	0x07, r1	; 7
	DIDR0	= 0x01;			//Disable Digi input on ADC0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	ADMUX = 0;				//Sets Mux selection bits to 0 ADC0 used
 192:	ec e7       	ldi	r30, 0x7C	; 124
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);	//Use Vcc Ref voltage selectin 01
 198:	80 81       	ld	r24, Z
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);	//Left adjust ADC Reg, ADCH 8-bit Resolution
 19e:	80 81       	ld	r24, Z
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	80 83       	st	Z, r24
	
	//Enable ADC, Start Conv, Set Auto Trig Enable
	ADCSRA |= (1 << ADEN);	//Enable ADC
 1a4:	ea e7       	ldi	r30, 0x7A	; 122
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //Set ADC Auto Trig
 1ae:	80 81       	ld	r24, Z
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//Enable Interrupts
 1b4:	80 81       	ld	r24, Z
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0); //8MHz, Pre-Scale 64 = 125KHz
 1ba:	80 81       	ld	r24, Z
 1bc:	86 60       	ori	r24, 0x06	; 6
 1be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	//Start Conversion
 1c0:	80 81       	ld	r24, Z
 1c2:	80 64       	ori	r24, 0x40	; 64
 1c4:	80 83       	st	Z, r24
	
	ADCSRB = 0;			//Free running mode
 1c6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	sei();				//Enable interrupts
 1ca:	78 94       	sei
 1cc:	08 95       	ret

000001ce <timeKepper>:
	
}//end ADC_Init

void timeKepper()
{
	TCCR1A	|= (1 << COM1A1) | (1 << WGM11) | (1 << WGM10);	//Clear OC1A on Compare Match, set	OC1A at BOTTOM (non-inverting mode)
 1ce:	e0 e8       	ldi	r30, 0x80	; 128
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	83 68       	ori	r24, 0x83	; 131
 1d6:	80 83       	st	Z, r24
	TCCR1B	|= (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS10); //PWM Fast mode 1024 Pre-Scale
 1d8:	e1 e8       	ldi	r30, 0x81	; 129
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	8d 61       	ori	r24, 0x1D	; 29
 1e0:	80 83       	st	Z, r24
	TIMSK1	|= (1 << TOIE1);
 1e2:	ef e6       	ldi	r30, 0x6F	; 111
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	80 83       	st	Z, r24
 1ec:	08 95       	ret

000001ee <interrupts>:
}//end timekeeper

void interrupts()
{
	DDRD	|= (1 << PD2); 	//Set to input for switch
 1ee:	52 9a       	sbi	0x0a, 2	; 10
	PORTD	|= (1 << PD2);	//Set Pull-up
 1f0:	5a 9a       	sbi	0x0b, 2	; 11

	EIMSK |= (1 << INT0);	//Enable extern INT0
 1f2:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC01);	//Enanble external INT0 on rise
 1f4:	e9 e6       	ldi	r30, 0x69	; 105
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 83       	st	Z, r24
 1fe:	08 95       	ret

00000200 <main>:
}//end ISR(INT0_vect)


int main(void)
{
	DDRB = 0x02;			//Set PINB1 as output
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	84 b9       	out	0x04, r24	; 4
	DDRD	|= (1 << DDD6);	//Set to output for OCA0
 204:	56 9a       	sbi	0x0a, 6	; 10
	;
	OCR1A = 25000;			//Arbritary initial value for OCR1A
 206:	88 ea       	ldi	r24, 0xA8	; 168
 208:	91 e6       	ldi	r25, 0x61	; 97
 20a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 20e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	//Functions to initialize 
	//ADC, TIMER1 and Interrupts	
	ADC_Init();
 212:	0e 94 c5 00 	call	0x18a	; 0x18a <ADC_Init>
	timeKepper();
 216:	0e 94 e7 00 	call	0x1ce	; 0x1ce <timeKepper>
	interrupts();
 21a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <interrupts>
 21e:	ff cf       	rjmp	.-2      	; 0x21e <main+0x1e>

00000220 <__fixunssfsi>:
 220:	0e 94 84 01 	call	0x308	; 0x308 <__fp_splitA>
 224:	88 f0       	brcs	.+34     	; 0x248 <__fixunssfsi+0x28>
 226:	9f 57       	subi	r25, 0x7F	; 127
 228:	98 f0       	brcs	.+38     	; 0x250 <__fixunssfsi+0x30>
 22a:	b9 2f       	mov	r27, r25
 22c:	99 27       	eor	r25, r25
 22e:	b7 51       	subi	r27, 0x17	; 23
 230:	b0 f0       	brcs	.+44     	; 0x25e <__fixunssfsi+0x3e>
 232:	e1 f0       	breq	.+56     	; 0x26c <__fixunssfsi+0x4c>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	88 1f       	adc	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	1a f0       	brmi	.+6      	; 0x244 <__fixunssfsi+0x24>
 23e:	ba 95       	dec	r27
 240:	c9 f7       	brne	.-14     	; 0x234 <__fixunssfsi+0x14>
 242:	14 c0       	rjmp	.+40     	; 0x26c <__fixunssfsi+0x4c>
 244:	b1 30       	cpi	r27, 0x01	; 1
 246:	91 f0       	breq	.+36     	; 0x26c <__fixunssfsi+0x4c>
 248:	0e 94 9e 01 	call	0x33c	; 0x33c <__fp_zero>
 24c:	b1 e0       	ldi	r27, 0x01	; 1
 24e:	08 95       	ret
 250:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__fp_zero>
 254:	67 2f       	mov	r22, r23
 256:	78 2f       	mov	r23, r24
 258:	88 27       	eor	r24, r24
 25a:	b8 5f       	subi	r27, 0xF8	; 248
 25c:	39 f0       	breq	.+14     	; 0x26c <__fixunssfsi+0x4c>
 25e:	b9 3f       	cpi	r27, 0xF9	; 249
 260:	cc f3       	brlt	.-14     	; 0x254 <__fixunssfsi+0x34>
 262:	86 95       	lsr	r24
 264:	77 95       	ror	r23
 266:	67 95       	ror	r22
 268:	b3 95       	inc	r27
 26a:	d9 f7       	brne	.-10     	; 0x262 <__fixunssfsi+0x42>
 26c:	3e f4       	brtc	.+14     	; 0x27c <__fixunssfsi+0x5c>
 26e:	90 95       	com	r25
 270:	80 95       	com	r24
 272:	70 95       	com	r23
 274:	61 95       	neg	r22
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	8f 4f       	sbci	r24, 0xFF	; 255
 27a:	9f 4f       	sbci	r25, 0xFF	; 255
 27c:	08 95       	ret

0000027e <__floatunsisf>:
 27e:	e8 94       	clt
 280:	09 c0       	rjmp	.+18     	; 0x294 <__floatsisf+0x12>

00000282 <__floatsisf>:
 282:	97 fb       	bst	r25, 7
 284:	3e f4       	brtc	.+14     	; 0x294 <__floatsisf+0x12>
 286:	90 95       	com	r25
 288:	80 95       	com	r24
 28a:	70 95       	com	r23
 28c:	61 95       	neg	r22
 28e:	7f 4f       	sbci	r23, 0xFF	; 255
 290:	8f 4f       	sbci	r24, 0xFF	; 255
 292:	9f 4f       	sbci	r25, 0xFF	; 255
 294:	99 23       	and	r25, r25
 296:	a9 f0       	breq	.+42     	; 0x2c2 <__floatsisf+0x40>
 298:	f9 2f       	mov	r31, r25
 29a:	96 e9       	ldi	r25, 0x96	; 150
 29c:	bb 27       	eor	r27, r27
 29e:	93 95       	inc	r25
 2a0:	f6 95       	lsr	r31
 2a2:	87 95       	ror	r24
 2a4:	77 95       	ror	r23
 2a6:	67 95       	ror	r22
 2a8:	b7 95       	ror	r27
 2aa:	f1 11       	cpse	r31, r1
 2ac:	f8 cf       	rjmp	.-16     	; 0x29e <__floatsisf+0x1c>
 2ae:	fa f4       	brpl	.+62     	; 0x2ee <__floatsisf+0x6c>
 2b0:	bb 0f       	add	r27, r27
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <__floatsisf+0x36>
 2b4:	60 ff       	sbrs	r22, 0
 2b6:	1b c0       	rjmp	.+54     	; 0x2ee <__floatsisf+0x6c>
 2b8:	6f 5f       	subi	r22, 0xFF	; 255
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	8f 4f       	sbci	r24, 0xFF	; 255
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	16 c0       	rjmp	.+44     	; 0x2ee <__floatsisf+0x6c>
 2c2:	88 23       	and	r24, r24
 2c4:	11 f0       	breq	.+4      	; 0x2ca <__floatsisf+0x48>
 2c6:	96 e9       	ldi	r25, 0x96	; 150
 2c8:	11 c0       	rjmp	.+34     	; 0x2ec <__floatsisf+0x6a>
 2ca:	77 23       	and	r23, r23
 2cc:	21 f0       	breq	.+8      	; 0x2d6 <__floatsisf+0x54>
 2ce:	9e e8       	ldi	r25, 0x8E	; 142
 2d0:	87 2f       	mov	r24, r23
 2d2:	76 2f       	mov	r23, r22
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <__floatsisf+0x5e>
 2d6:	66 23       	and	r22, r22
 2d8:	71 f0       	breq	.+28     	; 0x2f6 <__floatsisf+0x74>
 2da:	96 e8       	ldi	r25, 0x86	; 134
 2dc:	86 2f       	mov	r24, r22
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	2a f0       	brmi	.+10     	; 0x2ee <__floatsisf+0x6c>
 2e4:	9a 95       	dec	r25
 2e6:	66 0f       	add	r22, r22
 2e8:	77 1f       	adc	r23, r23
 2ea:	88 1f       	adc	r24, r24
 2ec:	da f7       	brpl	.-10     	; 0x2e4 <__floatsisf+0x62>
 2ee:	88 0f       	add	r24, r24
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	97 f9       	bld	r25, 7
 2f6:	08 95       	ret

000002f8 <__fp_split3>:
 2f8:	57 fd       	sbrc	r21, 7
 2fa:	90 58       	subi	r25, 0x80	; 128
 2fc:	44 0f       	add	r20, r20
 2fe:	55 1f       	adc	r21, r21
 300:	59 f0       	breq	.+22     	; 0x318 <__fp_splitA+0x10>
 302:	5f 3f       	cpi	r21, 0xFF	; 255
 304:	71 f0       	breq	.+28     	; 0x322 <__fp_splitA+0x1a>
 306:	47 95       	ror	r20

00000308 <__fp_splitA>:
 308:	88 0f       	add	r24, r24
 30a:	97 fb       	bst	r25, 7
 30c:	99 1f       	adc	r25, r25
 30e:	61 f0       	breq	.+24     	; 0x328 <__fp_splitA+0x20>
 310:	9f 3f       	cpi	r25, 0xFF	; 255
 312:	79 f0       	breq	.+30     	; 0x332 <__fp_splitA+0x2a>
 314:	87 95       	ror	r24
 316:	08 95       	ret
 318:	12 16       	cp	r1, r18
 31a:	13 06       	cpc	r1, r19
 31c:	14 06       	cpc	r1, r20
 31e:	55 1f       	adc	r21, r21
 320:	f2 cf       	rjmp	.-28     	; 0x306 <__fp_split3+0xe>
 322:	46 95       	lsr	r20
 324:	f1 df       	rcall	.-30     	; 0x308 <__fp_splitA>
 326:	08 c0       	rjmp	.+16     	; 0x338 <__fp_splitA+0x30>
 328:	16 16       	cp	r1, r22
 32a:	17 06       	cpc	r1, r23
 32c:	18 06       	cpc	r1, r24
 32e:	99 1f       	adc	r25, r25
 330:	f1 cf       	rjmp	.-30     	; 0x314 <__fp_splitA+0xc>
 332:	86 95       	lsr	r24
 334:	71 05       	cpc	r23, r1
 336:	61 05       	cpc	r22, r1
 338:	08 94       	sec
 33a:	08 95       	ret

0000033c <__fp_zero>:
 33c:	e8 94       	clt

0000033e <__fp_szero>:
 33e:	bb 27       	eor	r27, r27
 340:	66 27       	eor	r22, r22
 342:	77 27       	eor	r23, r23
 344:	cb 01       	movw	r24, r22
 346:	97 f9       	bld	r25, 7
 348:	08 95       	ret

0000034a <__mulsf3>:
 34a:	0e 94 b8 01 	call	0x370	; 0x370 <__mulsf3x>
 34e:	0c 94 29 02 	jmp	0x452	; 0x452 <__fp_round>
 352:	0e 94 1b 02 	call	0x436	; 0x436 <__fp_pscA>
 356:	38 f0       	brcs	.+14     	; 0x366 <__mulsf3+0x1c>
 358:	0e 94 22 02 	call	0x444	; 0x444 <__fp_pscB>
 35c:	20 f0       	brcs	.+8      	; 0x366 <__mulsf3+0x1c>
 35e:	95 23       	and	r25, r21
 360:	11 f0       	breq	.+4      	; 0x366 <__mulsf3+0x1c>
 362:	0c 94 12 02 	jmp	0x424	; 0x424 <__fp_inf>
 366:	0c 94 18 02 	jmp	0x430	; 0x430 <__fp_nan>
 36a:	11 24       	eor	r1, r1
 36c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__fp_szero>

00000370 <__mulsf3x>:
 370:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__fp_split3>
 374:	70 f3       	brcs	.-36     	; 0x352 <__mulsf3+0x8>

00000376 <__mulsf3_pse>:
 376:	95 9f       	mul	r25, r21
 378:	c1 f3       	breq	.-16     	; 0x36a <__mulsf3+0x20>
 37a:	95 0f       	add	r25, r21
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	55 1f       	adc	r21, r21
 380:	62 9f       	mul	r22, r18
 382:	f0 01       	movw	r30, r0
 384:	72 9f       	mul	r23, r18
 386:	bb 27       	eor	r27, r27
 388:	f0 0d       	add	r31, r0
 38a:	b1 1d       	adc	r27, r1
 38c:	63 9f       	mul	r22, r19
 38e:	aa 27       	eor	r26, r26
 390:	f0 0d       	add	r31, r0
 392:	b1 1d       	adc	r27, r1
 394:	aa 1f       	adc	r26, r26
 396:	64 9f       	mul	r22, r20
 398:	66 27       	eor	r22, r22
 39a:	b0 0d       	add	r27, r0
 39c:	a1 1d       	adc	r26, r1
 39e:	66 1f       	adc	r22, r22
 3a0:	82 9f       	mul	r24, r18
 3a2:	22 27       	eor	r18, r18
 3a4:	b0 0d       	add	r27, r0
 3a6:	a1 1d       	adc	r26, r1
 3a8:	62 1f       	adc	r22, r18
 3aa:	73 9f       	mul	r23, r19
 3ac:	b0 0d       	add	r27, r0
 3ae:	a1 1d       	adc	r26, r1
 3b0:	62 1f       	adc	r22, r18
 3b2:	83 9f       	mul	r24, r19
 3b4:	a0 0d       	add	r26, r0
 3b6:	61 1d       	adc	r22, r1
 3b8:	22 1f       	adc	r18, r18
 3ba:	74 9f       	mul	r23, r20
 3bc:	33 27       	eor	r19, r19
 3be:	a0 0d       	add	r26, r0
 3c0:	61 1d       	adc	r22, r1
 3c2:	23 1f       	adc	r18, r19
 3c4:	84 9f       	mul	r24, r20
 3c6:	60 0d       	add	r22, r0
 3c8:	21 1d       	adc	r18, r1
 3ca:	82 2f       	mov	r24, r18
 3cc:	76 2f       	mov	r23, r22
 3ce:	6a 2f       	mov	r22, r26
 3d0:	11 24       	eor	r1, r1
 3d2:	9f 57       	subi	r25, 0x7F	; 127
 3d4:	50 40       	sbci	r21, 0x00	; 0
 3d6:	9a f0       	brmi	.+38     	; 0x3fe <__mulsf3_pse+0x88>
 3d8:	f1 f0       	breq	.+60     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3da:	88 23       	and	r24, r24
 3dc:	4a f0       	brmi	.+18     	; 0x3f0 <__mulsf3_pse+0x7a>
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	bb 1f       	adc	r27, r27
 3e4:	66 1f       	adc	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	88 1f       	adc	r24, r24
 3ea:	91 50       	subi	r25, 0x01	; 1
 3ec:	50 40       	sbci	r21, 0x00	; 0
 3ee:	a9 f7       	brne	.-22     	; 0x3da <__mulsf3_pse+0x64>
 3f0:	9e 3f       	cpi	r25, 0xFE	; 254
 3f2:	51 05       	cpc	r21, r1
 3f4:	80 f0       	brcs	.+32     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f6:	0c 94 12 02 	jmp	0x424	; 0x424 <__fp_inf>
 3fa:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__fp_szero>
 3fe:	5f 3f       	cpi	r21, 0xFF	; 255
 400:	e4 f3       	brlt	.-8      	; 0x3fa <__mulsf3_pse+0x84>
 402:	98 3e       	cpi	r25, 0xE8	; 232
 404:	d4 f3       	brlt	.-12     	; 0x3fa <__mulsf3_pse+0x84>
 406:	86 95       	lsr	r24
 408:	77 95       	ror	r23
 40a:	67 95       	ror	r22
 40c:	b7 95       	ror	r27
 40e:	f7 95       	ror	r31
 410:	e7 95       	ror	r30
 412:	9f 5f       	subi	r25, 0xFF	; 255
 414:	c1 f7       	brne	.-16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 416:	fe 2b       	or	r31, r30
 418:	88 0f       	add	r24, r24
 41a:	91 1d       	adc	r25, r1
 41c:	96 95       	lsr	r25
 41e:	87 95       	ror	r24
 420:	97 f9       	bld	r25, 7
 422:	08 95       	ret

00000424 <__fp_inf>:
 424:	97 f9       	bld	r25, 7
 426:	9f 67       	ori	r25, 0x7F	; 127
 428:	80 e8       	ldi	r24, 0x80	; 128
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	08 95       	ret

00000430 <__fp_nan>:
 430:	9f ef       	ldi	r25, 0xFF	; 255
 432:	80 ec       	ldi	r24, 0xC0	; 192
 434:	08 95       	ret

00000436 <__fp_pscA>:
 436:	00 24       	eor	r0, r0
 438:	0a 94       	dec	r0
 43a:	16 16       	cp	r1, r22
 43c:	17 06       	cpc	r1, r23
 43e:	18 06       	cpc	r1, r24
 440:	09 06       	cpc	r0, r25
 442:	08 95       	ret

00000444 <__fp_pscB>:
 444:	00 24       	eor	r0, r0
 446:	0a 94       	dec	r0
 448:	12 16       	cp	r1, r18
 44a:	13 06       	cpc	r1, r19
 44c:	14 06       	cpc	r1, r20
 44e:	05 06       	cpc	r0, r21
 450:	08 95       	ret

00000452 <__fp_round>:
 452:	09 2e       	mov	r0, r25
 454:	03 94       	inc	r0
 456:	00 0c       	add	r0, r0
 458:	11 f4       	brne	.+4      	; 0x45e <__fp_round+0xc>
 45a:	88 23       	and	r24, r24
 45c:	52 f0       	brmi	.+20     	; 0x472 <__fp_round+0x20>
 45e:	bb 0f       	add	r27, r27
 460:	40 f4       	brcc	.+16     	; 0x472 <__fp_round+0x20>
 462:	bf 2b       	or	r27, r31
 464:	11 f4       	brne	.+4      	; 0x46a <__fp_round+0x18>
 466:	60 ff       	sbrs	r22, 0
 468:	04 c0       	rjmp	.+8      	; 0x472 <__fp_round+0x20>
 46a:	6f 5f       	subi	r22, 0xFF	; 255
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	8f 4f       	sbci	r24, 0xFF	; 255
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
