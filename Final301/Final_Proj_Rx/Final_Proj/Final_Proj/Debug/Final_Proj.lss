
Final_Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000009ca  00000a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080013a  0080013a  00000a98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ee3  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a76  00000000  00000000  00002af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e6  00000000  00000000  00003569  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00003f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000734  00000000  00000000  00004288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001000  00000000  00000000  000049bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000059bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 33       	cpi	r26, 0x3F	; 63
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  9e:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	83 e3       	ldi	r24, 0x33	; 51
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	e2 ec       	ldi	r30, 0xC2	; 194
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <writestring>:
void writeChar(unsigned char c) {
	UDR0 = c;                  // Display character on serial (i.e., PuTTY) terminal
	_delay_ms(320);             // delay for 200 ms
}

void writestring(char *c){
  cc:	fc 01       	movw	r30, r24
	unsigned int i = 0;
	while(c[i] != 0)
  ce:	90 81       	ld	r25, Z
  d0:	99 23       	and	r25, r25
  d2:	81 f0       	breq	.+32     	; 0xf4 <writestring+0x28>
  d4:	31 96       	adiw	r30, 0x01	; 1
	UCSR0B |= (1 << RXCIE0);                        //Enable Rec INT
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); //Set frame 8-bit, 1 STP
}//end USART_int

void writeChar(unsigned char c) {
	UDR0 = c;                  // Display character on serial (i.e., PuTTY) terminal
  d6:	a6 ec       	ldi	r26, 0xC6	; 198
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	9c 93       	st	X, r25
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	89 ef       	ldi	r24, 0xF9	; 249
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <writestring+0x16>
  ea:	00 c0       	rjmp	.+0      	; 0xec <writestring+0x20>
  ec:	00 00       	nop
	_delay_ms(320);             // delay for 200 ms
}

void writestring(char *c){
	unsigned int i = 0;
	while(c[i] != 0)
  ee:	91 91       	ld	r25, Z+
  f0:	91 11       	cpse	r25, r1
  f2:	f3 cf       	rjmp	.-26     	; 0xda <writestring+0xe>
  f4:	08 95       	ret

000000f6 <setup_rf>:
	writeChar(c[i++]);
}


nRF24L01 *setup_rf(void) {
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
  fa:	0e 94 95 01 	call	0x32a	; 0x32a <nRF24L01_init>
  fe:	ec 01       	movw	r28, r24
	rf->ss.port = &PORTB;
 100:	85 e2       	ldi	r24, 0x25	; 37
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	99 83       	std	Y+1, r25	; 0x01
 106:	88 83       	st	Y, r24
	rf->ss.pin = PB2;
 108:	22 e0       	ldi	r18, 0x02	; 2
 10a:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
 10c:	9c 83       	std	Y+4, r25	; 0x04
 10e:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PB1;
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	2d 83       	std	Y+5, r18	; 0x05
	rf->sck.port = &PORTB;
 114:	9f 83       	std	Y+7, r25	; 0x07
 116:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PB5;
 118:	25 e0       	ldi	r18, 0x05	; 5
 11a:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
 11c:	9a 87       	std	Y+10, r25	; 0x0a
 11e:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PB3;
 120:	23 e0       	ldi	r18, 0x03	; 3
 122:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
 124:	9d 87       	std	Y+13, r25	; 0x0d
 126:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PB4;
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	8e 87       	std	Y+14, r24	; 0x0e
	// interrupt on falling edge of INT0 (PD2)
	EICRA |= _BV(ISC01);
 12c:	e9 e6       	ldi	r30, 0x69	; 105
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	82 60       	ori	r24, 0x02	; 2
 134:	80 83       	st	Z, r24
	EIMSK |= _BV(INT0);
 136:	e8 9a       	sbi	0x1d, 0	; 29
	nRF24L01_begin(rf);
 138:	ce 01       	movw	r24, r28
 13a:	0e 94 85 02 	call	0x50a	; 0x50a <nRF24L01_begin>
	return rf;
}
 13e:	ce 01       	movw	r24, r28
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <process_message>:

void process_message(char *message) {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24

	if (strcmp(message, "ON") == 0)
 14c:	6b e0       	ldi	r22, 0x0B	; 11
 14e:	71 e0       	ldi	r23, 0x01	; 1
 150:	0e 94 da 04 	call	0x9b4	; 0x9b4 <strcmp>
 154:	89 2b       	or	r24, r25
 156:	11 f4       	brne	.+4      	; 0x15c <process_message+0x16>
	DDRB |= _BV(PB0);
	PORTB &= ~_BV(PB0);
}

inline void set_led_high(void) {
	PORTB |= _BV(PB0);
 158:	28 9a       	sbi	0x05, 0	; 5
 15a:	0a c0       	rjmp	.+20     	; 0x170 <process_message+0x2a>

void process_message(char *message) {

	if (strcmp(message, "ON") == 0)
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
 15c:	6e e0       	ldi	r22, 0x0E	; 14
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	ce 01       	movw	r24, r28
 162:	0e 94 da 04 	call	0x9b4	; 0x9b4 <strcmp>
 166:	89 2b       	or	r24, r25
 168:	19 f4       	brne	.+6      	; 0x170 <process_message+0x2a>
inline void set_led_high(void) {
	PORTB |= _BV(PB0);
}

inline void set_led_low(void) {
	PORTB &= _BV(PB0);
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	81 70       	andi	r24, 0x01	; 1
 16e:	85 b9       	out	0x05, r24	; 5
	if (strcmp(message, "ON") == 0)
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
	set_led_low();

}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <main>:
void writestring(char *c);
void writeChar(unsigned char c);

volatile bool rf_interrupt = false;

int main(void) {
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	c5 59       	subi	r28, 0x95	; 149
 180:	d1 09       	sbc	r29, r1
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
	
	USART_Init();        // Initialize UART
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	bool on = false;
	
	uint8_t address[5] = { 0x01, 0x01, 0x01, 0x01, 0x01};
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	e6 e0       	ldi	r30, 0x06	; 6
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	de 01       	movw	r26, r28
 198:	11 96       	adiw	r26, 0x01	; 1
 19a:	01 90       	ld	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	8a 95       	dec	r24
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x24>
	set_led_low();

}

inline void prepare_led_pin(void) {
	DDRB |= _BV(PB0);
 1a2:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~_BV(PB0);
 1a4:	28 98       	cbi	0x05, 0	; 5
	
	bool on = false;
	
	uint8_t address[5] = { 0x01, 0x01, 0x01, 0x01, 0x01};
	prepare_led_pin();
	sei();
 1a6:	78 94       	sei
	nRF24L01 *rf = setup_rf();
 1a8:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup_rf>
 1ac:	7c 01       	movw	r14, r24
	nRF24L01 *rf2 = setup_rf();
 1ae:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup_rf>
 1b2:	3c 01       	movw	r6, r24
	
	nRF24L01_listen(rf, 0, address);
 1b4:	ae 01       	movw	r20, r28
 1b6:	4f 5f       	subi	r20, 0xFF	; 255
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	c7 01       	movw	r24, r14
 1c0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_listen>
	
	//Added 05.05.2018
	//_delay_ms(500);
	nRF24L01_listen(rf2, 1, address);
 1c4:	ae 01       	movw	r20, r28
 1c6:	4f 5f       	subi	r20, 0xFF	; 255
 1c8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	c3 01       	movw	r24, r6
 1d0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_listen>
	
	uint8_t addr[5];
	uint8_t addr2[5];
	
	nRF24L01_read_register(rf, CONFIG, addr, 1);
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	ae 01       	movw	r20, r28
 1da:	4a 5f       	subi	r20, 0xFA	; 250
 1dc:	5f 4f       	sbci	r21, 0xFF	; 255
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	c7 01       	movw	r24, r14
 1e2:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_read_register>
	
	nRF24L01_read_register(rf2, CONFIG, addr2, 1);	//Added 05.05.2018
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	ae 01       	movw	r20, r28
 1ec:	45 5f       	subi	r20, 0xF5	; 245
 1ee:	5f 4f       	sbci	r21, 0xFF	; 255
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	c3 01       	movw	r24, r6
 1f4:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_read_register>

int main(void) {
	
	USART_Init();        // Initialize UART
	
	bool on = false;
 1f8:	10 e0       	ldi	r17, 0x00	; 0
				nRF24L01Message msg2;
				nRF24L01Message msg3;
				msg2.pipe_number = 1;
				
				
				nRF24L01_read_received_data(rf, &msg);
 1fa:	ce 01       	movw	r24, r28
 1fc:	8d 5a       	subi	r24, 0xAD	; 173
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
			rf_interrupt = false;
			while (nRF24L01_data_received(rf) && nRF24L01_data_received(rf2)) {
				nRF24L01Message msg;
				nRF24L01Message msg2;
				nRF24L01Message msg3;
				msg2.pipe_number = 1;
 200:	22 24       	eor	r2, r2
 202:	23 94       	inc	r2
 204:	31 2c       	mov	r3, r1
				
				
				nRF24L01_read_received_data(rf, &msg);
 206:	48 2e       	mov	r4, r24
 208:	59 2e       	mov	r5, r25
				
				nRF24L01_read_received_data(rf2, &msg2); //Added 05.05.2018
				
				
				process_message((char *)msg.data);
 20a:	9c 01       	movw	r18, r24
 20c:	2e 5f       	subi	r18, 0xFE	; 254
 20e:	3f 4f       	sbci	r19, 0xFF	; 255
 210:	69 01       	movw	r12, r18
				//writestring("    x");
				//writestring(msg2.data);
				writestring("\r\n");
				
				writestring("Y ACC: ");
				writestring(msg.data+8);
 212:	28 5f       	subi	r18, 0xF8	; 248
 214:	3f 4f       	sbci	r19, 0xFF	; 255
 216:	49 01       	movw	r8, r18
				//writestring(msg2.data+8);
				writestring("\r\n");
				
					
				writestring("Z ACC: ");
				writestring(msg.data+16);
 218:	28 5f       	subi	r18, 0xF8	; 248
 21a:	3f 4f       	sbci	r19, 0xFF	; 255
 21c:	59 01       	movw	r10, r18
	nRF24L01_read_register(rf, CONFIG, addr, 1);
	
	nRF24L01_read_register(rf2, CONFIG, addr2, 1);	//Added 05.05.2018

	while (true) {
		if (rf_interrupt) {
 21e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 222:	88 23       	and	r24, r24
 224:	e1 f3       	breq	.-8      	; 0x21e <main+0xa8>
			rf_interrupt = false;
 226:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
				
				nRF24L01_read_received_data(rf2, &msg2); //Added 05.05.2018
				
				
				process_message((char *)msg.data);
				on = !on;
 22a:	01 e0       	ldi	r16, 0x01	; 1
	nRF24L01_read_register(rf2, CONFIG, addr2, 1);	//Added 05.05.2018

	while (true) {
		if (rf_interrupt) {
			rf_interrupt = false;
			while (nRF24L01_data_received(rf) && nRF24L01_data_received(rf2)) {
 22c:	3f c0       	rjmp	.+126    	; 0x2ac <main+0x136>
				nRF24L01Message msg;
				nRF24L01Message msg2;
				nRF24L01Message msg3;
				msg2.pipe_number = 1;
 22e:	28 8a       	std	Y+16, r2	; 0x10
 230:	39 8a       	std	Y+17, r3	; 0x11
				
				
				nRF24L01_read_received_data(rf, &msg);
 232:	64 2d       	mov	r22, r4
 234:	75 2d       	mov	r23, r5
 236:	c7 01       	movw	r24, r14
 238:	0e 94 80 03 	call	0x700	; 0x700 <nRF24L01_read_received_data>
				
				nRF24L01_read_received_data(rf2, &msg2); //Added 05.05.2018
 23c:	be 01       	movw	r22, r28
 23e:	60 5f       	subi	r22, 0xF0	; 240
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	c3 01       	movw	r24, r6
 244:	0e 94 80 03 	call	0x700	; 0x700 <nRF24L01_read_received_data>
				
				
				process_message((char *)msg.data);
 248:	c6 01       	movw	r24, r12
 24a:	0e 94 a3 00 	call	0x146	; 0x146 <process_message>
				on = !on;
 24e:	10 27       	eor	r17, r16
				if(on){
 250:	69 f1       	breq	.+90     	; 0x2ac <main+0x136>
				
				writestring("Receiving: ");
 252:	82 e1       	ldi	r24, 0x12	; 18
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				writestring("\r\n");
 25a:	8e e1       	ldi	r24, 0x1E	; 30
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				writestring("X ACC: ");
 262:	81 e2       	ldi	r24, 0x21	; 33
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				writestring(msg.data);
 26a:	c6 01       	movw	r24, r12
 26c:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				//writestring("    x");
				//writestring(msg2.data);
				writestring("\r\n");
 270:	8e e1       	ldi	r24, 0x1E	; 30
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				
				writestring("Y ACC: ");
 278:	89 e2       	ldi	r24, 0x29	; 41
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				writestring(msg.data+8);
 280:	c4 01       	movw	r24, r8
 282:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				//writestring("    x");
				//writestring(msg2.data+8);
				writestring("\r\n");
 286:	8e e1       	ldi	r24, 0x1E	; 30
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				
					
				writestring("Z ACC: ");
 28e:	81 e3       	ldi	r24, 0x31	; 49
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				writestring(msg.data+16);
 296:	c5 01       	movw	r24, r10
 298:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				//writestring("    x");
				//writestring(msg2.data+16);
				writestring("\r\n");
 29c:	8e e1       	ldi	r24, 0x1E	; 30
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
				writestring("\r\n");
 2a4:	8e e1       	ldi	r24, 0x1E	; 30
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0e 94 66 00 	call	0xcc	; 0xcc <writestring>
	nRF24L01_read_register(rf2, CONFIG, addr2, 1);	//Added 05.05.2018

	while (true) {
		if (rf_interrupt) {
			rf_interrupt = false;
			while (nRF24L01_data_received(rf) && nRF24L01_data_received(rf2)) {
 2ac:	c7 01       	movw	r24, r14
 2ae:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nRF24L01_data_received>
 2b2:	88 23       	and	r24, r24
 2b4:	29 f0       	breq	.+10     	; 0x2c0 <main+0x14a>
 2b6:	c3 01       	movw	r24, r6
 2b8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <nRF24L01_data_received>
 2bc:	81 11       	cpse	r24, r1
 2be:	b7 cf       	rjmp	.-146    	; 0x22e <main+0xb8>
				//_delay_ms(3000);

				}
			}

			nRF24L01_listen(rf, 0, address);
 2c0:	ae 01       	movw	r20, r28
 2c2:	4f 5f       	subi	r20, 0xFF	; 255
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	c7 01       	movw	r24, r14
 2cc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_listen>
 2d0:	3f e7       	ldi	r19, 0x7F	; 127
 2d2:	89 ea       	ldi	r24, 0xA9	; 169
 2d4:	93 e0       	ldi	r25, 0x03	; 3
 2d6:	31 50       	subi	r19, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x160>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x16a>
 2e0:	00 00       	nop
			_delay_ms(1200);
			nRF24L01_listen(rf2, 1, address);
 2e2:	ae 01       	movw	r20, r28
 2e4:	4f 5f       	subi	r20, 0xFF	; 255
 2e6:	5f 4f       	sbci	r21, 0xFF	; 255
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	c3 01       	movw	r24, r6
 2ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_listen>
 2f2:	95 cf       	rjmp	.-214    	; 0x21e <main+0xa8>

000002f4 <__vector_1>:
inline void set_led_low(void) {
	PORTB &= _BV(PB0);
}

// nRF24L01 interrupt
ISR(INT0_vect) {
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	8f 93       	push	r24
	rf_interrupt = true;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
}
 306:	8f 91       	pop	r24
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config |= _BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    return success;
}
 312:	fc 01       	movw	r30, r24
 314:	a6 2f       	mov	r26, r22
 316:	b7 2f       	mov	r27, r23
 318:	9c 01       	movw	r18, r24
 31a:	2b 5f       	subi	r18, 0xFB	; 251
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	91 91       	ld	r25, Z+
 320:	9d 93       	st	X+, r25
 322:	e2 17       	cp	r30, r18
 324:	f3 07       	cpc	r31, r19
 326:	d9 f7       	brne	.-10     	; 0x31e <copy_address+0xc>
 328:	08 95       	ret

0000032a <nRF24L01_init>:
 32a:	80 e1       	ldi	r24, 0x10	; 16
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 b9 03 	call	0x772	; 0x772 <malloc>
 332:	20 e1       	ldi	r18, 0x10	; 16
 334:	fc 01       	movw	r30, r24
 336:	11 92       	st	Z+, r1
 338:	2a 95       	dec	r18
 33a:	e9 f7       	brne	.-6      	; 0x336 <nRF24L01_init+0xc>
 33c:	08 95       	ret

0000033e <nRF24L01_send_command>:
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	ec 01       	movw	r28, r24
 344:	da 01       	movw	r26, r20
 346:	e8 81       	ld	r30, Y
 348:	f9 81       	ldd	r31, Y+1	; 0x01
 34a:	50 81       	ld	r21, Z
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0a 80       	ldd	r0, Y+2	; 0x02
 352:	02 c0       	rjmp	.+4      	; 0x358 <nRF24L01_send_command+0x1a>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <nRF24L01_send_command+0x16>
 35c:	80 95       	com	r24
 35e:	85 23       	and	r24, r21
 360:	80 83       	st	Z, r24
 362:	6e bd       	out	0x2e, r22	; 46
 364:	0d b4       	in	r0, 0x2d	; 45
 366:	07 fe       	sbrs	r0, 7
 368:	fd cf       	rjmp	.-6      	; 0x364 <nRF24L01_send_command+0x26>
 36a:	8e b5       	in	r24, 0x2e	; 46
 36c:	8f 87       	std	Y+15, r24	; 0x0f
 36e:	21 15       	cp	r18, r1
 370:	31 05       	cpc	r19, r1
 372:	79 f0       	breq	.+30     	; 0x392 <nRF24L01_send_command+0x54>
 374:	fd 01       	movw	r30, r26
 376:	2a 0f       	add	r18, r26
 378:	3b 1f       	adc	r19, r27
 37a:	df 01       	movw	r26, r30
 37c:	90 81       	ld	r25, Z
 37e:	9e bd       	out	0x2e, r25	; 46
 380:	0d b4       	in	r0, 0x2d	; 45
 382:	07 fe       	sbrs	r0, 7
 384:	fd cf       	rjmp	.-6      	; 0x380 <nRF24L01_send_command+0x42>
 386:	9e b5       	in	r25, 0x2e	; 46
 388:	9c 93       	st	X, r25
 38a:	31 96       	adiw	r30, 0x01	; 1
 38c:	e2 17       	cp	r30, r18
 38e:	f3 07       	cpc	r31, r19
 390:	a1 f7       	brne	.-24     	; 0x37a <nRF24L01_send_command+0x3c>
 392:	e8 81       	ld	r30, Y
 394:	f9 81       	ldd	r31, Y+1	; 0x01
 396:	20 81       	ld	r18, Z
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0a 80       	ldd	r0, Y+2	; 0x02
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <nRF24L01_send_command+0x66>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <nRF24L01_send_command+0x62>
 3a8:	82 2b       	or	r24, r18
 3aa:	80 83       	st	Z, r24
 3ac:	8f 85       	ldd	r24, Y+15	; 0x0f
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <nRF24L01_write_register>:
 3b4:	60 62       	ori	r22, 0x20	; 32
 3b6:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_send_command>
 3ba:	08 95       	ret

000003bc <nRF24L01_read_register>:
 3bc:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_send_command>
 3c0:	08 95       	ret

000003c2 <nRF24L01_no_op>:
 3c2:	20 e0       	ldi	r18, 0x00	; 0
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	6f ef       	ldi	r22, 0xFF	; 255
 3cc:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_send_command>
 3d0:	08 95       	ret

000003d2 <nRF24L01_update_status>:
 3d2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <nRF24L01_no_op>
 3d6:	08 95       	ret

000003d8 <nRF24L01_listen>:
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <nRF24L01_listen+0x10>
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <nRF24L01_listen+0x12>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <nRF24L01_listen+0x14>
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	7c 01       	movw	r14, r24
 3f2:	d6 2e       	mov	r13, r22
 3f4:	ca 01       	movw	r24, r20
 3f6:	be 01       	movw	r22, r28
 3f8:	6f 5f       	subi	r22, 0xFF	; 255
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	0e 94 89 01 	call	0x312	; 0x312 <copy_address>
 400:	6a e0       	ldi	r22, 0x0A	; 10
 402:	6d 0d       	add	r22, r13
 404:	25 e0       	ldi	r18, 0x05	; 5
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	ae 01       	movw	r20, r28
 40a:	4f 5f       	subi	r20, 0xFF	; 255
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	c7 01       	movw	r24, r14
 410:	0e 94 da 01 	call	0x3b4	; 0x3b4 <nRF24L01_write_register>
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	ae 01       	movw	r20, r28
 41a:	4a 5f       	subi	r20, 0xFA	; 250
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	62 e0       	ldi	r22, 0x02	; 2
 420:	c7 01       	movw	r24, r14
 422:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_read_register>
 426:	01 e0       	ldi	r16, 0x01	; 1
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	c8 01       	movw	r24, r16
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	da 94       	dec	r13
 434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	9e 81       	ldd	r25, Y+6	; 0x06
 438:	89 2b       	or	r24, r25
 43a:	8e 83       	std	Y+6, r24	; 0x06
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	ae 01       	movw	r20, r28
 442:	4a 5f       	subi	r20, 0xFA	; 250
 444:	5f 4f       	sbci	r21, 0xFF	; 255
 446:	62 e0       	ldi	r22, 0x02	; 2
 448:	c7 01       	movw	r24, r14
 44a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <nRF24L01_write_register>
 44e:	d7 01       	movw	r26, r14
 450:	13 96       	adiw	r26, 0x03	; 3
 452:	ed 91       	ld	r30, X+
 454:	fc 91       	ld	r31, X
 456:	14 97       	sbiw	r26, 0x04	; 4
 458:	80 81       	ld	r24, Z
 45a:	15 96       	adiw	r26, 0x05	; 5
 45c:	0c 90       	ld	r0, X
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 460:	00 0f       	add	r16, r16
 462:	11 1f       	adc	r17, r17
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 468:	08 2b       	or	r16, r24
 46a:	00 83       	st	Z, r16
 46c:	26 96       	adiw	r28, 0x06	; 6
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	df 90       	pop	r13
 486:	08 95       	ret

00000488 <nRF24L01_pipe_number_received>:
 488:	fc 01       	movw	r30, r24
 48a:	27 85       	ldd	r18, Z+15	; 0x0f
 48c:	2e 70       	andi	r18, 0x0E	; 14
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	35 95       	asr	r19
 492:	27 95       	ror	r18
 494:	26 30       	cpi	r18, 0x06	; 6
 496:	31 05       	cpc	r19, r1
 498:	1c f4       	brge	.+6      	; 0x4a0 <nRF24L01_pipe_number_received+0x18>
 49a:	82 2f       	mov	r24, r18
 49c:	93 2f       	mov	r25, r19
 49e:	08 95       	ret
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	9f ef       	ldi	r25, 0xFF	; 255
 4a4:	08 95       	ret

000004a6 <nRF24L01_data_received>:
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	ec 01       	movw	r28, r24
 4ac:	eb 81       	ldd	r30, Y+3	; 0x03
 4ae:	fc 81       	ldd	r31, Y+4	; 0x04
 4b0:	20 81       	ld	r18, Z
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0d 80       	ldd	r0, Y+5	; 0x05
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <nRF24L01_data_received+0x18>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	0a 94       	dec	r0
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <nRF24L01_data_received+0x14>
 4c2:	80 95       	com	r24
 4c4:	82 23       	and	r24, r18
 4c6:	80 83       	st	Z, r24
 4c8:	ce 01       	movw	r24, r28
 4ca:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <nRF24L01_update_status>
 4ce:	ce 01       	movw	r24, r28
 4d0:	0e 94 44 02 	call	0x488	; 0x488 <nRF24L01_pipe_number_received>
 4d4:	89 2f       	mov	r24, r25
 4d6:	80 95       	com	r24
 4d8:	88 1f       	adc	r24, r24
 4da:	88 27       	eor	r24, r24
 4dc:	88 1f       	adc	r24, r24
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <nRF24L01_clear_interrupts>:
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	1f 92       	push	r1
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
 4ee:	20 e7       	ldi	r18, 0x70	; 112
 4f0:	29 83       	std	Y+1, r18	; 0x01
 4f2:	21 e0       	ldi	r18, 0x01	; 1
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	ae 01       	movw	r20, r28
 4f8:	4f 5f       	subi	r20, 0xFF	; 255
 4fa:	5f 4f       	sbci	r21, 0xFF	; 255
 4fc:	67 e0       	ldi	r22, 0x07	; 7
 4fe:	0e 94 da 01 	call	0x3b4	; 0x3b4 <nRF24L01_write_register>
 502:	0f 90       	pop	r0
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <nRF24L01_begin>:
 50a:	ff 92       	push	r15
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	1f 92       	push	r1
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	8c 01       	movw	r16, r24
 51c:	dc 01       	movw	r26, r24
 51e:	ed 91       	ld	r30, X+
 520:	fc 91       	ld	r31, X
 522:	11 97       	sbiw	r26, 0x01	; 1
 524:	42 91       	ld	r20, -Z
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	9c 01       	movw	r18, r24
 52c:	12 96       	adiw	r26, 0x02	; 2
 52e:	0c 90       	ld	r0, X
 530:	12 97       	sbiw	r26, 0x02	; 2
 532:	02 c0       	rjmp	.+4      	; 0x538 <nRF24L01_begin+0x2e>
 534:	22 0f       	add	r18, r18
 536:	33 1f       	adc	r19, r19
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <nRF24L01_begin+0x2a>
 53c:	24 2b       	or	r18, r20
 53e:	20 83       	st	Z, r18
 540:	13 96       	adiw	r26, 0x03	; 3
 542:	ed 91       	ld	r30, X+
 544:	fc 91       	ld	r31, X
 546:	14 97       	sbiw	r26, 0x04	; 4
 548:	42 91       	ld	r20, -Z
 54a:	9c 01       	movw	r18, r24
 54c:	15 96       	adiw	r26, 0x05	; 5
 54e:	0c 90       	ld	r0, X
 550:	15 97       	sbiw	r26, 0x05	; 5
 552:	02 c0       	rjmp	.+4      	; 0x558 <nRF24L01_begin+0x4e>
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <nRF24L01_begin+0x4a>
 55c:	24 2b       	or	r18, r20
 55e:	20 83       	st	Z, r18
 560:	ed 91       	ld	r30, X+
 562:	fc 91       	ld	r31, X
 564:	11 97       	sbiw	r26, 0x01	; 1
 566:	40 81       	ld	r20, Z
 568:	9c 01       	movw	r18, r24
 56a:	12 96       	adiw	r26, 0x02	; 2
 56c:	0c 90       	ld	r0, X
 56e:	12 97       	sbiw	r26, 0x02	; 2
 570:	02 c0       	rjmp	.+4      	; 0x576 <nRF24L01_begin+0x6c>
 572:	22 0f       	add	r18, r18
 574:	33 1f       	adc	r19, r19
 576:	0a 94       	dec	r0
 578:	e2 f7       	brpl	.-8      	; 0x572 <nRF24L01_begin+0x68>
 57a:	24 2b       	or	r18, r20
 57c:	20 83       	st	Z, r18
 57e:	13 96       	adiw	r26, 0x03	; 3
 580:	ed 91       	ld	r30, X+
 582:	fc 91       	ld	r31, X
 584:	14 97       	sbiw	r26, 0x04	; 4
 586:	30 81       	ld	r19, Z
 588:	ac 01       	movw	r20, r24
 58a:	15 96       	adiw	r26, 0x05	; 5
 58c:	0c 90       	ld	r0, X
 58e:	15 97       	sbiw	r26, 0x05	; 5
 590:	02 c0       	rjmp	.+4      	; 0x596 <nRF24L01_begin+0x8c>
 592:	44 0f       	add	r20, r20
 594:	55 1f       	adc	r21, r21
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <nRF24L01_begin+0x88>
 59a:	24 2f       	mov	r18, r20
 59c:	20 95       	com	r18
 59e:	23 23       	and	r18, r19
 5a0:	20 83       	st	Z, r18
 5a2:	2c b5       	in	r18, 0x2c	; 44
 5a4:	20 61       	ori	r18, 0x10	; 16
 5a6:	2c bd       	out	0x2c, r18	; 44
 5a8:	2c b5       	in	r18, 0x2c	; 44
 5aa:	20 64       	ori	r18, 0x40	; 64
 5ac:	2c bd       	out	0x2c, r18	; 44
 5ae:	16 96       	adiw	r26, 0x06	; 6
 5b0:	ed 91       	ld	r30, X+
 5b2:	fc 91       	ld	r31, X
 5b4:	17 97       	sbiw	r26, 0x07	; 7
 5b6:	42 91       	ld	r20, -Z
 5b8:	9c 01       	movw	r18, r24
 5ba:	18 96       	adiw	r26, 0x08	; 8
 5bc:	0c 90       	ld	r0, X
 5be:	18 97       	sbiw	r26, 0x08	; 8
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <nRF24L01_begin+0xbc>
 5c2:	22 0f       	add	r18, r18
 5c4:	33 1f       	adc	r19, r19
 5c6:	0a 94       	dec	r0
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <nRF24L01_begin+0xb8>
 5ca:	24 2b       	or	r18, r20
 5cc:	20 83       	st	Z, r18
 5ce:	19 96       	adiw	r26, 0x09	; 9
 5d0:	ed 91       	ld	r30, X+
 5d2:	fc 91       	ld	r31, X
 5d4:	1a 97       	sbiw	r26, 0x0a	; 10
 5d6:	42 91       	ld	r20, -Z
 5d8:	9c 01       	movw	r18, r24
 5da:	1b 96       	adiw	r26, 0x0b	; 11
 5dc:	0c 90       	ld	r0, X
 5de:	1b 97       	sbiw	r26, 0x0b	; 11
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <nRF24L01_begin+0xdc>
 5e2:	22 0f       	add	r18, r18
 5e4:	33 1f       	adc	r19, r19
 5e6:	0a 94       	dec	r0
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <nRF24L01_begin+0xd8>
 5ea:	24 2b       	or	r18, r20
 5ec:	20 83       	st	Z, r18
 5ee:	1c 96       	adiw	r26, 0x0c	; 12
 5f0:	ed 91       	ld	r30, X+
 5f2:	fc 91       	ld	r31, X
 5f4:	1d 97       	sbiw	r26, 0x0d	; 13
 5f6:	22 91       	ld	r18, -Z
 5f8:	1e 96       	adiw	r26, 0x0e	; 14
 5fa:	0c 90       	ld	r0, X
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <nRF24L01_begin+0xf8>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	0a 94       	dec	r0
 604:	e2 f7       	brpl	.-8      	; 0x5fe <nRF24L01_begin+0xf4>
 606:	80 95       	com	r24
 608:	82 23       	and	r24, r18
 60a:	80 83       	st	Z, r24
 60c:	8c b5       	in	r24, 0x2c	; 44
 60e:	87 7f       	andi	r24, 0xF7	; 247
 610:	8c bd       	out	0x2c, r24	; 44
 612:	8c b5       	in	r24, 0x2c	; 44
 614:	8b 7f       	andi	r24, 0xFB	; 251
 616:	8c bd       	out	0x2c, r24	; 44
 618:	8c b5       	in	r24, 0x2c	; 44
 61a:	8e 7f       	andi	r24, 0xFE	; 254
 61c:	8c bd       	out	0x2c, r24	; 44
 61e:	8c b5       	in	r24, 0x2c	; 44
 620:	8d 7f       	andi	r24, 0xFD	; 253
 622:	8c bd       	out	0x2c, r24	; 44
 624:	8d b5       	in	r24, 0x2d	; 45
 626:	81 60       	ori	r24, 0x01	; 1
 628:	8d bd       	out	0x2d, r24	; 45
 62a:	8c b5       	in	r24, 0x2c	; 44
 62c:	8f 7d       	andi	r24, 0xDF	; 223
 62e:	8c bd       	out	0x2c, r24	; 44
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	40 e0       	ldi	r20, 0x00	; 0
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	62 ee       	ldi	r22, 0xE2	; 226
 63a:	c8 01       	movw	r24, r16
 63c:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_send_command>
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	50 e0       	ldi	r21, 0x00	; 0
 648:	61 ee       	ldi	r22, 0xE1	; 225
 64a:	c8 01       	movw	r24, r16
 64c:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_send_command>
 650:	c8 01       	movw	r24, r16
 652:	0e 94 72 02 	call	0x4e4	; 0x4e4 <nRF24L01_clear_interrupts>
 656:	8f e0       	ldi	r24, 0x0F	; 15
 658:	89 83       	std	Y+1, r24	; 0x01
 65a:	21 e0       	ldi	r18, 0x01	; 1
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	ae 01       	movw	r20, r28
 660:	4f 5f       	subi	r20, 0xFF	; 255
 662:	5f 4f       	sbci	r21, 0xFF	; 255
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	c8 01       	movw	r24, r16
 668:	0e 94 da 01 	call	0x3b4	; 0x3b4 <nRF24L01_write_register>
 66c:	0f 2e       	mov	r0, r31
 66e:	ff e3       	ldi	r31, 0x3F	; 63
 670:	ff 2e       	mov	r15, r31
 672:	f0 2d       	mov	r31, r0
 674:	f9 82       	std	Y+1, r15	; 0x01
 676:	21 e0       	ldi	r18, 0x01	; 1
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	ae 01       	movw	r20, r28
 67c:	4f 5f       	subi	r20, 0xFF	; 255
 67e:	5f 4f       	sbci	r21, 0xFF	; 255
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	c8 01       	movw	r24, r16
 684:	0e 94 da 01 	call	0x3b4	; 0x3b4 <nRF24L01_write_register>
 688:	f9 82       	std	Y+1, r15	; 0x01
 68a:	21 e0       	ldi	r18, 0x01	; 1
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	ae 01       	movw	r20, r28
 690:	4f 5f       	subi	r20, 0xFF	; 255
 692:	5f 4f       	sbci	r21, 0xFF	; 255
 694:	6c e1       	ldi	r22, 0x1C	; 28
 696:	c8 01       	movw	r24, r16
 698:	0e 94 da 01 	call	0x3b4	; 0x3b4 <nRF24L01_write_register>
 69c:	84 e0       	ldi	r24, 0x04	; 4
 69e:	89 83       	std	Y+1, r24	; 0x01
 6a0:	21 e0       	ldi	r18, 0x01	; 1
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	ae 01       	movw	r20, r28
 6a6:	4f 5f       	subi	r20, 0xFF	; 255
 6a8:	5f 4f       	sbci	r21, 0xFF	; 255
 6aa:	6d e1       	ldi	r22, 0x1D	; 29
 6ac:	c8 01       	movw	r24, r16
 6ae:	0e 94 da 01 	call	0x3b4	; 0x3b4 <nRF24L01_write_register>
 6b2:	19 82       	std	Y+1, r1	; 0x01
 6b4:	21 e0       	ldi	r18, 0x01	; 1
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	ae 01       	movw	r20, r28
 6ba:	4f 5f       	subi	r20, 0xFF	; 255
 6bc:	5f 4f       	sbci	r21, 0xFF	; 255
 6be:	62 e0       	ldi	r22, 0x02	; 2
 6c0:	c8 01       	movw	r24, r16
 6c2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <nRF24L01_write_register>
 6c6:	0f 90       	pop	r0
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	08 95       	ret

000006d4 <nRF24L01_clear_receive_interrupt>:
void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
    uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_receive_interrupt(nRF24L01 *rf) {
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	1f 92       	push	r1
 6da:	cd b7       	in	r28, 0x3d	; 61
 6dc:	de b7       	in	r29, 0x3e	; 62
 6de:	fc 01       	movw	r30, r24
    uint8_t data = _BV(RX_DR) | rf->status;
 6e0:	97 85       	ldd	r25, Z+15	; 0x0f
 6e2:	90 64       	ori	r25, 0x40	; 64
 6e4:	99 83       	std	Y+1, r25	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 6e6:	21 e0       	ldi	r18, 0x01	; 1
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	ae 01       	movw	r20, r28
 6ec:	4f 5f       	subi	r20, 0xFF	; 255
 6ee:	5f 4f       	sbci	r21, 0xFF	; 255
 6f0:	67 e0       	ldi	r22, 0x07	; 7
 6f2:	cf 01       	movw	r24, r30
 6f4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <nRF24L01_write_register>
}
 6f8:	0f 90       	pop	r0
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	08 95       	ret

00000700 <nRF24L01_read_received_data>:
    nRF24L01_write_register(rf, EN_RXADDR, &current_pipes, 1);

    set_high(rf->ce);
}

bool nRF24L01_read_received_data(nRF24L01 *rf, nRF24L01Message *message) {
 700:	ef 92       	push	r14
 702:	ff 92       	push	r15
 704:	0f 93       	push	r16
 706:	1f 93       	push	r17
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	8c 01       	movw	r16, r24
 70e:	eb 01       	movw	r28, r22
    message->pipe_number = nRF24L01_pipe_number_received(rf);
 710:	0e 94 44 02 	call	0x488	; 0x488 <nRF24L01_pipe_number_received>
 714:	99 83       	std	Y+1, r25	; 0x01
 716:	88 83       	st	Y, r24
    nRF24L01_clear_receive_interrupt(rf);
 718:	c8 01       	movw	r24, r16
 71a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <nRF24L01_clear_receive_interrupt>
    if (message->pipe_number < 0) {
 71e:	88 81       	ld	r24, Y
 720:	99 81       	ldd	r25, Y+1	; 0x01
 722:	99 23       	and	r25, r25
 724:	2c f4       	brge	.+10     	; 0x730 <nRF24L01_read_received_data+0x30>
        message->length = 0;
 726:	ce 5b       	subi	r28, 0xBE	; 190
 728:	df 4f       	sbci	r29, 0xFF	; 255
 72a:	18 82       	st	Y, r1
        return false;
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	1a c0       	rjmp	.+52     	; 0x764 <nRF24L01_read_received_data+0x64>
    }

    nRF24L01_read_register(rf, R_RX_PL_WID, &message->length, 1);
 730:	21 e0       	ldi	r18, 0x01	; 1
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	7e 01       	movw	r14, r28
 736:	82 e4       	ldi	r24, 0x42	; 66
 738:	e8 0e       	add	r14, r24
 73a:	f1 1c       	adc	r15, r1
 73c:	a7 01       	movw	r20, r14
 73e:	60 e6       	ldi	r22, 0x60	; 96
 740:	c8 01       	movw	r24, r16
 742:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_read_register>

    if (message->length > 0) {
 746:	f7 01       	movw	r30, r14
 748:	20 81       	ld	r18, Z
 74a:	22 23       	and	r18, r18
 74c:	51 f0       	breq	.+20     	; 0x762 <nRF24L01_read_received_data+0x62>
        nRF24L01_send_command(rf, R_RX_PAYLOAD, &message->data,
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	ae 01       	movw	r20, r28
 752:	4e 5f       	subi	r20, 0xFE	; 254
 754:	5f 4f       	sbci	r21, 0xFF	; 255
 756:	61 e6       	ldi	r22, 0x61	; 97
 758:	c8 01       	movw	r24, r16
 75a:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF24L01_send_command>
            message->length);
    }

    return true;
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	01 c0       	rjmp	.+2      	; 0x764 <nRF24L01_read_received_data+0x64>
 762:	81 e0       	ldi	r24, 0x01	; 1
}
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	ff 90       	pop	r15
 76e:	ef 90       	pop	r14
 770:	08 95       	ret

00000772 <malloc>:
 772:	0f 93       	push	r16
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	82 30       	cpi	r24, 0x02	; 2
 77c:	91 05       	cpc	r25, r1
 77e:	10 f4       	brcc	.+4      	; 0x784 <malloc+0x12>
 780:	82 e0       	ldi	r24, 0x02	; 2
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <__flp>
 788:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <__flp+0x1>
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	a0 e0       	ldi	r26, 0x00	; 0
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	30 97       	sbiw	r30, 0x00	; 0
 796:	19 f1       	breq	.+70     	; 0x7de <malloc+0x6c>
 798:	40 81       	ld	r20, Z
 79a:	51 81       	ldd	r21, Z+1	; 0x01
 79c:	02 81       	ldd	r16, Z+2	; 0x02
 79e:	13 81       	ldd	r17, Z+3	; 0x03
 7a0:	48 17       	cp	r20, r24
 7a2:	59 07       	cpc	r21, r25
 7a4:	c8 f0       	brcs	.+50     	; 0x7d8 <malloc+0x66>
 7a6:	84 17       	cp	r24, r20
 7a8:	95 07       	cpc	r25, r21
 7aa:	69 f4       	brne	.+26     	; 0x7c6 <malloc+0x54>
 7ac:	10 97       	sbiw	r26, 0x00	; 0
 7ae:	31 f0       	breq	.+12     	; 0x7bc <malloc+0x4a>
 7b0:	12 96       	adiw	r26, 0x02	; 2
 7b2:	0c 93       	st	X, r16
 7b4:	12 97       	sbiw	r26, 0x02	; 2
 7b6:	13 96       	adiw	r26, 0x03	; 3
 7b8:	1c 93       	st	X, r17
 7ba:	27 c0       	rjmp	.+78     	; 0x80a <malloc+0x98>
 7bc:	00 93 3d 01 	sts	0x013D, r16	; 0x80013d <__flp>
 7c0:	10 93 3e 01 	sts	0x013E, r17	; 0x80013e <__flp+0x1>
 7c4:	22 c0       	rjmp	.+68     	; 0x80a <malloc+0x98>
 7c6:	21 15       	cp	r18, r1
 7c8:	31 05       	cpc	r19, r1
 7ca:	19 f0       	breq	.+6      	; 0x7d2 <malloc+0x60>
 7cc:	42 17       	cp	r20, r18
 7ce:	53 07       	cpc	r21, r19
 7d0:	18 f4       	brcc	.+6      	; 0x7d8 <malloc+0x66>
 7d2:	9a 01       	movw	r18, r20
 7d4:	bd 01       	movw	r22, r26
 7d6:	ef 01       	movw	r28, r30
 7d8:	df 01       	movw	r26, r30
 7da:	f8 01       	movw	r30, r16
 7dc:	db cf       	rjmp	.-74     	; 0x794 <malloc+0x22>
 7de:	21 15       	cp	r18, r1
 7e0:	31 05       	cpc	r19, r1
 7e2:	f9 f0       	breq	.+62     	; 0x822 <malloc+0xb0>
 7e4:	28 1b       	sub	r18, r24
 7e6:	39 0b       	sbc	r19, r25
 7e8:	24 30       	cpi	r18, 0x04	; 4
 7ea:	31 05       	cpc	r19, r1
 7ec:	80 f4       	brcc	.+32     	; 0x80e <malloc+0x9c>
 7ee:	8a 81       	ldd	r24, Y+2	; 0x02
 7f0:	9b 81       	ldd	r25, Y+3	; 0x03
 7f2:	61 15       	cp	r22, r1
 7f4:	71 05       	cpc	r23, r1
 7f6:	21 f0       	breq	.+8      	; 0x800 <malloc+0x8e>
 7f8:	fb 01       	movw	r30, r22
 7fa:	93 83       	std	Z+3, r25	; 0x03
 7fc:	82 83       	std	Z+2, r24	; 0x02
 7fe:	04 c0       	rjmp	.+8      	; 0x808 <malloc+0x96>
 800:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <__flp+0x1>
 804:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__flp>
 808:	fe 01       	movw	r30, r28
 80a:	32 96       	adiw	r30, 0x02	; 2
 80c:	44 c0       	rjmp	.+136    	; 0x896 <malloc+0x124>
 80e:	fe 01       	movw	r30, r28
 810:	e2 0f       	add	r30, r18
 812:	f3 1f       	adc	r31, r19
 814:	81 93       	st	Z+, r24
 816:	91 93       	st	Z+, r25
 818:	22 50       	subi	r18, 0x02	; 2
 81a:	31 09       	sbc	r19, r1
 81c:	39 83       	std	Y+1, r19	; 0x01
 81e:	28 83       	st	Y, r18
 820:	3a c0       	rjmp	.+116    	; 0x896 <malloc+0x124>
 822:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <__brkval>
 826:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <__brkval+0x1>
 82a:	23 2b       	or	r18, r19
 82c:	41 f4       	brne	.+16     	; 0x83e <malloc+0xcc>
 82e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 832:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 836:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <__brkval+0x1>
 83a:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <__brkval>
 83e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 842:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 846:	21 15       	cp	r18, r1
 848:	31 05       	cpc	r19, r1
 84a:	41 f4       	brne	.+16     	; 0x85c <malloc+0xea>
 84c:	2d b7       	in	r18, 0x3d	; 61
 84e:	3e b7       	in	r19, 0x3e	; 62
 850:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 854:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 858:	24 1b       	sub	r18, r20
 85a:	35 0b       	sbc	r19, r21
 85c:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <__brkval>
 860:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <__brkval+0x1>
 864:	e2 17       	cp	r30, r18
 866:	f3 07       	cpc	r31, r19
 868:	a0 f4       	brcc	.+40     	; 0x892 <malloc+0x120>
 86a:	2e 1b       	sub	r18, r30
 86c:	3f 0b       	sbc	r19, r31
 86e:	28 17       	cp	r18, r24
 870:	39 07       	cpc	r19, r25
 872:	78 f0       	brcs	.+30     	; 0x892 <malloc+0x120>
 874:	ac 01       	movw	r20, r24
 876:	4e 5f       	subi	r20, 0xFE	; 254
 878:	5f 4f       	sbci	r21, 0xFF	; 255
 87a:	24 17       	cp	r18, r20
 87c:	35 07       	cpc	r19, r21
 87e:	48 f0       	brcs	.+18     	; 0x892 <malloc+0x120>
 880:	4e 0f       	add	r20, r30
 882:	5f 1f       	adc	r21, r31
 884:	50 93 3c 01 	sts	0x013C, r21	; 0x80013c <__brkval+0x1>
 888:	40 93 3b 01 	sts	0x013B, r20	; 0x80013b <__brkval>
 88c:	81 93       	st	Z+, r24
 88e:	91 93       	st	Z+, r25
 890:	02 c0       	rjmp	.+4      	; 0x896 <malloc+0x124>
 892:	e0 e0       	ldi	r30, 0x00	; 0
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	cf 01       	movw	r24, r30
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	08 95       	ret

000008a2 <free>:
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	09 f4       	brne	.+2      	; 0x8ac <free+0xa>
 8aa:	81 c0       	rjmp	.+258    	; 0x9ae <__stack+0xaf>
 8ac:	fc 01       	movw	r30, r24
 8ae:	32 97       	sbiw	r30, 0x02	; 2
 8b0:	13 82       	std	Z+3, r1	; 0x03
 8b2:	12 82       	std	Z+2, r1	; 0x02
 8b4:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <__flp>
 8b8:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <__flp+0x1>
 8bc:	10 97       	sbiw	r26, 0x00	; 0
 8be:	81 f4       	brne	.+32     	; 0x8e0 <free+0x3e>
 8c0:	20 81       	ld	r18, Z
 8c2:	31 81       	ldd	r19, Z+1	; 0x01
 8c4:	82 0f       	add	r24, r18
 8c6:	93 1f       	adc	r25, r19
 8c8:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <__brkval>
 8cc:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <__brkval+0x1>
 8d0:	28 17       	cp	r18, r24
 8d2:	39 07       	cpc	r19, r25
 8d4:	51 f5       	brne	.+84     	; 0x92a <__stack+0x2b>
 8d6:	f0 93 3c 01 	sts	0x013C, r31	; 0x80013c <__brkval+0x1>
 8da:	e0 93 3b 01 	sts	0x013B, r30	; 0x80013b <__brkval>
 8de:	67 c0       	rjmp	.+206    	; 0x9ae <__stack+0xaf>
 8e0:	ed 01       	movw	r28, r26
 8e2:	20 e0       	ldi	r18, 0x00	; 0
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	ce 17       	cp	r28, r30
 8e8:	df 07       	cpc	r29, r31
 8ea:	40 f4       	brcc	.+16     	; 0x8fc <free+0x5a>
 8ec:	4a 81       	ldd	r20, Y+2	; 0x02
 8ee:	5b 81       	ldd	r21, Y+3	; 0x03
 8f0:	9e 01       	movw	r18, r28
 8f2:	41 15       	cp	r20, r1
 8f4:	51 05       	cpc	r21, r1
 8f6:	f1 f0       	breq	.+60     	; 0x934 <__stack+0x35>
 8f8:	ea 01       	movw	r28, r20
 8fa:	f5 cf       	rjmp	.-22     	; 0x8e6 <free+0x44>
 8fc:	d3 83       	std	Z+3, r29	; 0x03
 8fe:	c2 83       	std	Z+2, r28	; 0x02
 900:	40 81       	ld	r20, Z
 902:	51 81       	ldd	r21, Z+1	; 0x01
 904:	84 0f       	add	r24, r20
 906:	95 1f       	adc	r25, r21
 908:	c8 17       	cp	r28, r24
 90a:	d9 07       	cpc	r29, r25
 90c:	59 f4       	brne	.+22     	; 0x924 <__stack+0x25>
 90e:	88 81       	ld	r24, Y
 910:	99 81       	ldd	r25, Y+1	; 0x01
 912:	84 0f       	add	r24, r20
 914:	95 1f       	adc	r25, r21
 916:	02 96       	adiw	r24, 0x02	; 2
 918:	91 83       	std	Z+1, r25	; 0x01
 91a:	80 83       	st	Z, r24
 91c:	8a 81       	ldd	r24, Y+2	; 0x02
 91e:	9b 81       	ldd	r25, Y+3	; 0x03
 920:	93 83       	std	Z+3, r25	; 0x03
 922:	82 83       	std	Z+2, r24	; 0x02
 924:	21 15       	cp	r18, r1
 926:	31 05       	cpc	r19, r1
 928:	29 f4       	brne	.+10     	; 0x934 <__stack+0x35>
 92a:	f0 93 3e 01 	sts	0x013E, r31	; 0x80013e <__flp+0x1>
 92e:	e0 93 3d 01 	sts	0x013D, r30	; 0x80013d <__flp>
 932:	3d c0       	rjmp	.+122    	; 0x9ae <__stack+0xaf>
 934:	e9 01       	movw	r28, r18
 936:	fb 83       	std	Y+3, r31	; 0x03
 938:	ea 83       	std	Y+2, r30	; 0x02
 93a:	49 91       	ld	r20, Y+
 93c:	59 91       	ld	r21, Y+
 93e:	c4 0f       	add	r28, r20
 940:	d5 1f       	adc	r29, r21
 942:	ec 17       	cp	r30, r28
 944:	fd 07       	cpc	r31, r29
 946:	61 f4       	brne	.+24     	; 0x960 <__stack+0x61>
 948:	80 81       	ld	r24, Z
 94a:	91 81       	ldd	r25, Z+1	; 0x01
 94c:	84 0f       	add	r24, r20
 94e:	95 1f       	adc	r25, r21
 950:	02 96       	adiw	r24, 0x02	; 2
 952:	e9 01       	movw	r28, r18
 954:	99 83       	std	Y+1, r25	; 0x01
 956:	88 83       	st	Y, r24
 958:	82 81       	ldd	r24, Z+2	; 0x02
 95a:	93 81       	ldd	r25, Z+3	; 0x03
 95c:	9b 83       	std	Y+3, r25	; 0x03
 95e:	8a 83       	std	Y+2, r24	; 0x02
 960:	e0 e0       	ldi	r30, 0x00	; 0
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	12 96       	adiw	r26, 0x02	; 2
 966:	8d 91       	ld	r24, X+
 968:	9c 91       	ld	r25, X
 96a:	13 97       	sbiw	r26, 0x03	; 3
 96c:	00 97       	sbiw	r24, 0x00	; 0
 96e:	19 f0       	breq	.+6      	; 0x976 <__stack+0x77>
 970:	fd 01       	movw	r30, r26
 972:	dc 01       	movw	r26, r24
 974:	f7 cf       	rjmp	.-18     	; 0x964 <__stack+0x65>
 976:	8d 91       	ld	r24, X+
 978:	9c 91       	ld	r25, X
 97a:	11 97       	sbiw	r26, 0x01	; 1
 97c:	9d 01       	movw	r18, r26
 97e:	2e 5f       	subi	r18, 0xFE	; 254
 980:	3f 4f       	sbci	r19, 0xFF	; 255
 982:	82 0f       	add	r24, r18
 984:	93 1f       	adc	r25, r19
 986:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <__brkval>
 98a:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <__brkval+0x1>
 98e:	28 17       	cp	r18, r24
 990:	39 07       	cpc	r19, r25
 992:	69 f4       	brne	.+26     	; 0x9ae <__stack+0xaf>
 994:	30 97       	sbiw	r30, 0x00	; 0
 996:	29 f4       	brne	.+10     	; 0x9a2 <__stack+0xa3>
 998:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__flp+0x1>
 99c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__flp>
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0xa7>
 9a2:	13 82       	std	Z+3, r1	; 0x03
 9a4:	12 82       	std	Z+2, r1	; 0x02
 9a6:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <__brkval+0x1>
 9aa:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <__brkval>
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	08 95       	ret

000009b4 <strcmp>:
 9b4:	fb 01       	movw	r30, r22
 9b6:	dc 01       	movw	r26, r24
 9b8:	8d 91       	ld	r24, X+
 9ba:	01 90       	ld	r0, Z+
 9bc:	80 19       	sub	r24, r0
 9be:	01 10       	cpse	r0, r1
 9c0:	d9 f3       	breq	.-10     	; 0x9b8 <strcmp+0x4>
 9c2:	99 0b       	sbc	r25, r25
 9c4:	08 95       	ret

000009c6 <_exit>:
 9c6:	f8 94       	cli

000009c8 <__stop_program>:
 9c8:	ff cf       	rjmp	.-2      	; 0x9c8 <__stop_program>
