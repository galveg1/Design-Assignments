
tas4da2_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000750  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000689  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000287  00000000  00000000  00000fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e6  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_16>:
#define l_on	PORTB |=	(1 << PORTB2)
#define l_off	PORTB &=	~(1 << PORTB2)
#define l_tog	PINB  |=	(1 << PINB2)

ISR(TIMER0_OVF_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	l_tog;
  90:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f e7       	ldi	r18, 0x7F	; 127
  94:	8a e1       	ldi	r24, 0x1A	; 26
  96:	96 e0       	ldi	r25, 0x06	; 6
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <__vector_16+0x18>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <__vector_16+0x22>
  a2:	00 00       	nop
	_delay_ms(250);	//LED_on half the period .5s
	l_tog;
  a4:	1a 9a       	sbi	0x03, 2	; 3
  a6:	2f e7       	ldi	r18, 0x7F	; 127
  a8:	8a e1       	ldi	r24, 0x1A	; 26
  aa:	96 e0       	ldi	r25, 0x06	; 6
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <__vector_16+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <__vector_16+0x36>
  b6:	00 00       	nop
	_delay_ms(250);
}
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	2f 91       	pop	r18
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <main>:


int main(void)
{
	DDRB |= (1 << DDB2);	//set ouput
  c8:	22 9a       	sbi	0x04, 2	; 4
		

	TCCR0B |= (1 << CS02) | (1 << CS00);	//Pre-Scaler 1024
  ca:	85 b5       	in	r24, 0x25	; 37
  cc:	85 60       	ori	r24, 0x05	; 5
  ce:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);					//Set-OVF 
  d0:	ee e6       	ldi	r30, 0x6E	; 110
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24
	sei();
  da:	78 94       	sei
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x14>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
